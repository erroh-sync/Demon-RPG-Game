<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>Obj_CharacterData</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Player Data  //

// Stats
Level = 1; // Only really used as a progression display
Experience = 0;
Hitpoints = 30; // Override
MaxHitpoints = 30; // Override
Manapoints = 25;
MaxManapoints = 25;

/********************************
DEMO STAT OVERRIDES
********************************/
Level = 5; // Only really used as a progression display
Experience = 0;
Hitpoints = round(29 + Obj_PlayerData.Level * 1.2); // Override
MaxHitpoints = Hitpoints; // Override
Manapoints = round( 24 + Obj_PlayerData.Level * 1.1);
MaxManapoints = Manapoints;

Strength = 10; // Affects physical skill damage.
Endurance = 10; // Affects how much overall damage you take.
Agility = 10; // Affects turn order, dodging and accuracy.
Luck = 10; // Affects critical chance and how often you are afflicted with statuses.
/*******************************/

Gold = 0;
MaxGold = 999999;

// DisplayData
ManaFlashAmount = Hitpoints;
ManaFlashTimer = 2.0;

// Inventory
InventoryArray[0] = 0; // Position is the item index, value is the quantity.
for(var i = 0; i &lt; array_height_2d(Obj_SkillItemData.AmmoData); i += 1){AmmoInvArray[i] = 0;} // Position is the ammo index, value is the quantity.
/* DEBUG: GIVING PLAYER AMMO */
AmmoInvArray[0] = 24;
AmmoInvArray[3] = 3;

CurrSelectedAmmo = 0; // The index of the ammo type currently selected.

// Flags
for(var i = 0; i &lt; 255; i += 1){GameFlags[i] = 0;} // Position is the flag number, value is whether or not it is checked. // Currently 256 flags exist. Can be pretty well infinite.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(ManaFlashTimer &gt; 0.0){
    ManaFlashTimer -= HealthbarAnimSpeed;
    if(HealthbarAnim &lt; 0.0){
        HealthFlashTimer = 0.0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
