<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Spr_Debug_WallRend</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>Obj_Renderer</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

enum TargetType{
    None,
    Gun,
    Magic,
    MagicAll,
    Talk
};

TType = TargetType.None;
DisplayTType = TType;

TargetReticuleAlpha = 0.0;
TargetReticuleFadeSpeed = 0.1;

EnemyDrawDimensions = 16;

EnemyNearDrawDist = 192;
EnemyFarDrawDist = 360;
EnemySpreadDist = 160;

CamRootX = 0;
CamRootY = 0;
CamRootZ = 0;
CamPosX = 0;
CamPosY = 0;
CamPosZ = 0;
CamTargX = 0;
CamTargY = 0;
CamTargZ = 0;
CamLerpTime = 1;
CamLerpFrame = 0;

ReticuleXCurrent = 0;
ReticuleXTarget = 0;
ReticuleYCurrent = 0;
ReticuleYTarget = 0;
ReticuleMovementSpeed = 24;

ReticuleFrame = 0;
ReticuleFrameRate = 0.15;

ReticuleRotationAmount = 0;
ReticuleRotationSpeed = 0.015;
ReticuleRotationStart = 0;
ReticuleRotationEnd = 0;
ReticuleOffsetDistance = 28;

ReticuleSurface = surface_create(256,256);

CameraShakeAmount = 0;
CameraShakeDecayFactor = 0.1;

// Text Popup
enum PopupTextType{
    ptt_None,
    ptt_Critical,
    ptt_Miss,
    ptt_Void
};

TextType = PopupTextType.ptt_None;
TextAnimTimer = 0;
TextAnimTimerMax = 50;
TextAnim = 0;
TextAnimMax = pi * 0.6;
TextAnimSpeed = 0.15
TextShrinkStartTime = 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Camera Movement
CamPosX = lerp(CamRootX, CamTargX, Scr_SCurve(CamLerpFrame/CamLerpTime));
CamPosY = lerp(CamRootY, CamTargY, Scr_SCurve(CamLerpFrame/CamLerpTime));
CamPosZ = lerp(CamRootZ, CamTargZ, Scr_SCurve(CamLerpFrame/CamLerpTime));;

if(Obj_GameManager.CameraShakeAmount &gt; 0){
    var shakedir = random(360);
    CamPosY += cos(shakedir) * Obj_GameManager.CameraShakeAmount;
    CamPosZ += sin(shakedir) * Obj_GameManager.CameraShakeAmount;
}

if(CamLerpFrame &lt; CamLerpTime)
    CamLerpFrame += 1;
    
ReticuleRotationAmount += ReticuleRotationSpeed;

/*
if(TType = TargetType.Gun &amp;&amp; ReticuleRotationAmount &gt; 1.5)
{
    ReticuleRotationAmount = 0;
    ReticuleRotationStart = ReticuleRotationEnd;
    ReticuleRotationEnd += random_range(-2 * pi, 2 * pi);
}
*/

if(ReticuleXCurrent &lt; ReticuleXTarget){
    ReticuleXCurrent += ReticuleMovementSpeed;
    if(ReticuleXCurrent &gt; ReticuleXTarget)
        ReticuleXCurrent = ReticuleXTarget
}
else if(ReticuleXCurrent &gt; ReticuleXTarget){
    ReticuleXCurrent -= ReticuleMovementSpeed;
    if(ReticuleXCurrent &lt; ReticuleXTarget)
        ReticuleXCurrent = ReticuleXTarget
}

if(ReticuleYCurrent &lt; ReticuleYTarget){
    ReticuleYCurrent += ReticuleMovementSpeed;
    if(ReticuleYCurrent &gt; ReticuleYTarget)
        ReticuleYCurrent = ReticuleYTarget
}
else if(ReticuleYCurrent &gt; ReticuleYTarget){
    ReticuleYCurrent -= ReticuleMovementSpeed;
    if(ReticuleYCurrent &lt; ReticuleYTarget)
        ReticuleYCurrent = ReticuleYTarget
}
    
ReticuleFrame += ReticuleFrameRate;
if(ReticuleFrame &gt;= 4)
    ReticuleFrame -= 4;
    

if(TType == TargetType.None &amp;&amp; TextAnim == 0)
{
    TargetReticuleAlpha -= TargetReticuleFadeSpeed;
    if(TargetReticuleAlpha &lt;= 0.0)
    {
        TargetReticuleAlpha = 0;
        DisplayTType = TargetType.None;
    }
}
else
{
    DisplayTType = TType;
    TargetReticuleAlpha += TargetReticuleFadeSpeed;
    if(TargetReticuleAlpha &gt; 1)
        TargetReticuleAlpha = 1;
}

// Popup Text
TextAnimTimer -= 1;
if(TextAnim &lt; TextAnimMax &amp;&amp; TextAnimTimer &gt; TextShrinkStartTime)
{
    TextAnim += TextAnimSpeed;
    if(TextAnim &gt; TextAnimMax)
        TextAnim = TextAnimMax
}else if(TextAnimTimer &lt;= TextShrinkStartTime){
    TextAnim -= TextAnimSpeed;
    if(TextAnim &lt; 0)
        TextAnim = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(bEnableDraw &amp;&amp; instance_exists(Obj_CombatManager))
{
    if(Obj_CombatManager.bDrawCombatScene)
    {
        // TODO: Redraw Skybox
        // TODO: Draw Backdrop from Script Variable
        d3d_draw_block(-1024, -1024, -100, 1024, 1024, 0, background_get_texture(Bg_Prison_BunkerFloor), 64, 64);
        
        // Draw Enemy Sprites        
        var i;
        var n = instance_number(Obj_EnemyData);
        for(i = 0; i &lt; n; i += 1)
        {
            var enem = instance_find(Obj_EnemyData, i);
            
            with(enem)
            {
                bEnableDraw = true;
                event_perform(ev_draw, 0);
                bEnableDraw = false;
            }
            
            enem.bHighlighted = false; // Unhighlight enemies we aren't selecting. Ones we are will be rehighlighted later
            
            if(i == Obj_CombatManager.AttackTarget)
            {
                enem.bHighlighted = true;
                
                // Calculate screen coordinates for the reticle
                Scr_ConvertPrepare( CamPosX, CamPosY, CamPosZ, CamPosX + 1, CamPosY, CamPosZ, 0, 0, 1, Obj_RenderPipeline.FOV, Obj_RenderPipeline.ScreenWidth/Obj_RenderPipeline.ScreenHeight);
                Scr_Convert3d(enem.x, enem.y, enem.AimOffset, CamPosX, CamPosY, CamPosZ);
            
                ReticuleYTarget = y_2d;
                ReticuleXTarget = x_2d;
            }
        }
        
        // Draw Attack Effects
        with(Obj_Effect)
        {
            bAttackEffectEnableDraw = true;
            event_perform(ev_draw, 0);
            bAttackEffectEnableDraw = false;
        }
        
        if(DisplayTType != TargetType.None)
        {
            // Init Reticule Surface
            if(surface_exists(ReticuleSurface))
            {
                surface_set_target(ReticuleSurface);
        
                draw_clear_alpha(c_black, 0.0);
                d3d_set_projection_ortho(0,0, 256, 256,0);
                
                draw_set_alpha(1);
                draw_set_color(c_white);
                
                // Calcs
                var XOff;
                var YOff;
                switch(DisplayTType)
                {
                    case TargetType.Gun:
                    {
                        //XOff = sin(lerp(ReticuleRotationStart, ReticuleRotationEnd, Scr_SCurve(clamp(ReticuleRotationAmount, 0, 1)))) * ReticuleOffsetDistance;
                        //YOff = cos(lerp(ReticuleRotationStart, ReticuleRotationEnd, Scr_SCurve(clamp(ReticuleRotationAmount, 0, 1)))) * ReticuleOffsetDistance;
                        
                        XOff = sin(ReticuleRotationAmount*8);
                        YOff = cos(ReticuleRotationAmount*8);
                    }break;
                    case TargetType.Magic:
                    {        
                        XOff = sin(ReticuleRotationAmount) * ReticuleOffsetDistance;
                        YOff = cos(ReticuleRotationAmount) * ReticuleOffsetDistance - ReticuleOffsetDistance/3;
                    }break;
                    case TargetType.Talk:
                    {        
                        XOff = sin(ReticuleRotationAmount) * ReticuleOffsetDistance/4 + ReticuleOffsetDistance*1.25;
                        YOff = cos(ReticuleRotationAmount*4) * ReticuleOffsetDistance/8 + ReticuleOffsetDistance*1.25;
                    }break;
                }
                
                // Backing
                switch(DisplayTType)
                {
                    case TargetType.Gun:
                    {
                        draw_sprite_ext(GUI_Combat_WeaponTarget_GunTargetBacking, 0, 128, 128, 0.7 + (XOff * 0.05), 0.7 + (YOff * 0.05), 0.0, c_white, 1.0);
                    }break;
                    case TargetType.Magic:
                    {        
                        draw_sprite_ext(GUI_Combat_SkillTarget_SkillTargetBacking, ReticuleFrame, 128 + XOff, 128 + YOff, 1.0, 1.0, 0.0, c_white, 1.0);
                    }break;
                    case TargetType.Talk:
                    {        
                        draw_sprite_ext(GUI_Combat_TalkTarget_TalkTargetBacking, ReticuleFrame, 128 + XOff, 128 + YOff, 1.0, 1.0, 0.0, c_white, 1.0);
                    }break;
                }
                
                // Midground
                draw_sprite_ext(GUI_Combat_Misc_TargetRing, 0, 128, 128, 1.0, 1.0, 0.0, c_white, 1.0);
                
                // Foreground
                switch(DisplayTType)
                {
                    case TargetType.Gun:
                    {
                        draw_sprite_ext(GUI_Combat_WeaponTarget_GunTargetForeground, 0, 128, 128, 0.7 + (XOff * 0.05), 0.7 + (YOff * 0.05), 0.0, c_white, 1.0);
                    }break;
                    case TargetType.Magic:
                    {        
                        draw_sprite_ext(GUI_Combat_SkillTarget_SkillTargetForeground, ReticuleFrame, 128 + XOff, 128 + YOff, 1.0, 1.0, 0.0, c_white, 1.0);
                    }break;
                    case TargetType.Talk:
                    {        
                        draw_sprite_ext(GUI_Combat_TalkTarget_TalkTargetForeground, ReticuleFrame, 128 + XOff, 128 + YOff, 1.0, 1.0, 0.0, c_white, 1.0);
                    }break;
                }
                
                //Draw the popup text        
                if(TextAnimTimer &gt; 0){
                    switch(TextType){
                        case PopupTextType.ptt_Critical:
                        {
                            var Offset = lerp(0, 48, Scr_SCurve(clamp((TextAnimTimerMax - TextAnimTimer)/(TextAnimTimerMax/1.5),0,1))) ;
                            draw_sprite_ext(GUI_Combat_Misc_CritPopup, -1, 128 + Offset, 128 - (sin(TextAnim*1.3) * 32) - Offset, sin(TextAnim) * 1.3, sin(TextAnim) * 1.3, 0.0, c_white, 1.0);
                            break;
                        }
                        case PopupTextType.ptt_Miss:
                        {
                            var Offset = lerp(0, 48, clamp((TextAnimTimerMax - TextAnimTimer)/(TextAnimTimerMax/3),0,1));
                            draw_sprite_ext(GUI_Combat_Misc_MissPopup, -1, 128 + Offset, 128 - (sin(TextAnim*1.3) * 32) + Offset, sin(TextAnim) * 1.1, sin(TextAnim) * 1.1, 0.0, c_white, 1.0);
                            break;
                        }
                        case PopupTextType.ptt_Void:
                        {
                            var Offset = lerp(0, 48, clamp((TextAnimTimerMax - TextAnimTimer)/(TextAnimTimerMax/3),0,1));
                            draw_sprite_ext(GUI_Combat_Misc_VoidPopup, -1, 128 + Offset, 128 - (sin(TextAnim*1.3) * 32) + Offset, sin(TextAnim) * 1.1, sin(TextAnim) * 1.1, 0.0, c_white, 1.0);
                            break;
                        }
                    }
                }
                
                surface_reset_target();
                Scr_Reset3dView();
            }else{
                ReticuleSurface = surface_create( 256, 256);
            }
            
            d3d_set_projection_ortho(0,0,Obj_RenderPipeline.ScreenWidth,Obj_RenderPipeline.ScreenHeight,0);
            draw_surface_ext(ReticuleSurface, ReticuleXCurrent - 128, ReticuleYCurrent - 128, 1, 1, 0.0, c_white, TargetReticuleAlpha);
            
            Scr_Reset3dView();
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
