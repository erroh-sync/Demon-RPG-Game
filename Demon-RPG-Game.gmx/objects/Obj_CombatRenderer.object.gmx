<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Spr_Debug_WallRend</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>Obj_Renderer</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

enum TargetType{
    None,
    Gun,
    Magic
};

TType = TargetType.None;

EnemyDrawDimensions = 16;

EnemyNearDrawDist = 128;
EnemyFarDrawDist = 256;
EnemySpreadDist =  128;

CamRootX = 0;
CamRootY = 0;
CamPosX = 0;
CamPosY = 0;
CamTargX = 0;
CamTargY = 0;
CamLerpTime = 0;
CamLerpFrame = 0;

ReticuleX = 0;
ReticuleYRoot = 0;
ReticuleYTarget = 0;
ReticuleYMovementAmount = 0;
ReticuleYMovementSpeed = 0.15;

ReticuleRotationAmount = 0;
ReticuleRotationSpeed = 0.015;
ReticuleRotationStart = 0;
ReticuleRotationEnd = 0;
ReticuleOffsetDistance = 12;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Camera Movement
CamPosX = lerp(CamRootX, CamTargX, Scr_SCurve(CamLerpFrame/CamLerpTime));
CamPosY = lerp(CamRootY, CamTargY, Scr_SCurve(CamLerpFrame/CamLerpTime));

if(CamLerpFrame &lt; CamLerpTime)
    CamLerpFrame += 1;
    
ReticuleRotationAmount += ReticuleRotationSpeed;
if(ReticuleRotationAmount &gt; 1.5){
    ReticuleRotationAmount = 0;
    ReticuleRotationStart = ReticuleRotationEnd;
    ReticuleRotationEnd = random_range(0, 4*pi);
}

ReticuleYMovementAmount += ReticuleYMovementSpeed;
if(ReticuleYMovementAmount &gt; 1.0)
    ReticuleYMovementAmount = 1.0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(bEnableDraw &amp;&amp; instance_exists(Obj_CombatManager))
{
    if(Obj_CombatManager.bDrawCombatScene)
    {
        // TODO: Redraw Skybox
        // TODO: Draw Backdrop from Script Variable
        d3d_draw_block(-1024, -1024, -100, 1024, 1024, -16, background_get_texture(Bg_Debug_Test), 64, 64);
        
        // Draw Enemy Sprites        
        var i;
        var n = instance_number(Obj_EnemyData);
        for(i = 0; i &lt; n; i += 1)
        {
            var enem = instance_find(Obj_EnemyData, i);
            
            with(enem)
            {
                bEnableDraw = true;
                event_perform(ev_draw, 0);
                bEnableDraw = false;
            }
            
            enem.bHighlighted = false; // Unhighlight enemies we aren't selecting. Ones we are will be rehighlighted later
            
            if(i == Obj_CombatManager.AttackTarget)
            {
                if(TType != TargetType.None)
                    enem.bHighlighted = true;
            
                if(ReticuleYTarget != enem.y)
                {
                    ReticuleYRoot = lerp(ReticuleYRoot, ReticuleYTarget, Scr_SCurve(ReticuleYMovementAmount));
                    ReticuleYTarget = enem.y;
                    ReticuleYMovementAmount = 0;
                    ReticuleX = enem.x;
                }
            }
        }
        
        // Targetting Overlay
        
        if(TType != TargetType.None){
            var YO = sin(lerp(ReticuleRotationStart, ReticuleRotationEnd, Scr_SCurve(clamp(ReticuleRotationAmount, 0, 1)))) * ReticuleOffsetDistance;
            var ZO = cos(lerp(ReticuleRotationStart, ReticuleRotationEnd, Scr_SCurve(clamp(ReticuleRotationAmount, 0, 1)))) * ReticuleOffsetDistance;
            var YP = lerp(ReticuleYRoot, ReticuleYTarget, Scr_SCurve(ReticuleYMovementAmount));
        
            // Draw the secondary overlay Backing
            switch(TType)
            {
                case TargetType.Gun:
                {
                    d3d_draw_wall(ReticuleX-0.12, YP - EnemyDrawDimensions + YO, EnemyDrawDimensions * 2 + ZO, ReticuleX-0.12, YP + EnemyDrawDimensions + YO, ZO, sprite_get_texture(GUI_Combat_WeaponTarget_GunTargetBacking, 0), 1, 1); 
                }break;
                case TargetType.Magic:
                {                    
                }break;
            }
        
            // Draw the generic midground
            d3d_draw_wall(ReticuleX-0.11, YP - EnemyDrawDimensions, EnemyDrawDimensions * 2, ReticuleX-0.11, YP + EnemyDrawDimensions,  0, sprite_get_texture(GUI_Combat_Misc_TargetRing, 0), 1, 1);
            
            // Draw the secondary overlay Foreground
            switch(TType)
            {
                case TargetType.Gun:
                {
                    d3d_draw_wall(ReticuleX-0.12, YP - EnemyDrawDimensions + YO, EnemyDrawDimensions*2 + ZO, ReticuleX-0.12, YP + EnemyDrawDimensions + YO, ZO, sprite_get_texture(GUI_Combat_WeaponTarget_GunTargetForeground, 0), 1, 1); 
                }break;
                case TargetType.Magic:
                {
                }break;
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
