<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Obj_UIMaster</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Define UI Enum
enum CombatUIState {
    CommandMenu,
    WeaponTargetMenu,
    AmmoMenu,
    SkillMenu,
    SkillTargetMenu,
    ItemMenu,
    TalkTargetMenu,
    TalkConverseMenu,
    FleeMenu
};

// Call Super Function
event_inherited();

// Set x and y max to that of the command menu on start.
xMax = 0;
yMax = 4;

State = CombatUIState.CommandMenu;

/* Animation Stuff */

// Header Jiggle
HeaderJiggleTimer = 0;
HeaderJiggleSpeed = 1.5;
HeaderJiggleAmount = 2;
HeaderJiggleTimerMax = 90;

// HeaderOverlayJumping
HeaderOverlayPulseTimer = 0;
HeaderOverlayPulseSpeed = 6;
HeaderOverlayPulseAmount = 0.3;
HeaderOverlayRotation = 0;
HeaderOverlayRotationVariation = 4;

// Command Button Displacement
CommandButtonDisplacement[0] = 0;
CommandButtonDisplacement[1] = 0;
CommandButtonDisplacement[2] = 0;
CommandButtonDisplacement[3] = 0;
CommandButtonDisplacement[4] = 0;
MaxButtonDisplacement = 27;
ButtonDisplacementSpeed = 0.15;

// Arrow Movement &amp; Pulsing
SelectArrowLastPos = yPosition * 40;
SelectArrowNewPos = SelectArrowLastPos;
SelectArrowDisplacement = 0;
SelectArrowSpeed = 0.15;

ArrowPulseTimer = 0;

AmmoAnimationMoveDir = 0;
AmmoAnimationPosition = 0;
AmmoAnimationSpeed = 1/FastScrollIntervalTime/2;
AmmoAnimStoredXPos = 0;


// Stored Stuff
StoredCommandMenuPositon = 0; // Used when returning to the command menu from the Flee or Guard menu
StoredSkillMenuPosition = 0;
bUsingGun = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Call Super Function
event_inherited();

switch(State)
{
    case CombatUIState.CommandMenu:
    {
        // Button Displacement
        var i;
        for (i = 0; i &lt; 5; i++)
        {
            if(i == yPosition)
            {
                CommandButtonDisplacement[i] += ButtonDisplacementSpeed;
                
                if(CommandButtonDisplacement[i] &gt;= 1.0)
                    CommandButtonDisplacement[i] = 1.0;
            }else{
                CommandButtonDisplacement[i] -= ButtonDisplacementSpeed;
            
                if(CommandButtonDisplacement[i] &lt;= 0)
                    CommandButtonDisplacement[i] = 0;
            }
        }
        
        // Arrow Movement
        if(yPosition * 40 != SelectArrowNewPos){
            SelectArrowLastPos = SelectArrowNewPos;
            SelectArrowNewPos = yPosition * 40;
            SelectArrowDisplacement = 0;
        }
        SelectArrowDisplacement += SelectArrowSpeed;
        if(SelectArrowDisplacement &gt;= 1.0)
            SelectArrowDisplacement = 1.0;
        
        // Selection
        if(Obj_InputManager.InputSelectAxisDown &gt; 0){
            switch(yPosition)
            {
                case 0: // Weapon Targetting
                {
                    State = CombatUIState.WeaponTargetMenu;
                    xMax = instance_number(Obj_EnemyData) - 1;
                    yMax = 1;
                    xPosition = 0;
                    yPosition = 0;
                    break;
                }
                /*
                case 1: // Skill Select
                {
                    State = CombatUIState.SkillMenu;
                    xMax = 0;
                    yMax = array_length_1d(Obj_PlayerData.SkillArray);
                    break;
                }
                case 2: // Skill Select
                {
                    State = CombatUIState.ItemMenu;
                    xMax = 0;
                    yMax = array_length_1d(Obj_PlayerData.InventoryArray);
                    break;
                }
                case 3: // Talk Targetting
                {
                    State = CombatUIState.TalkTargetMenu;
                    xMax = instance_number(Obj_EnemyData);
                    yMax = 1;
                    break;
                }
                case 4: // Flee
                {
                    //???????? IDk what to put here yet
                    break;
                }*/
            }
        }
        break;
    }
    case CombatUIState.WeaponTargetMenu:
    {
        if(yPosition == 0){
            Obj_CombatManager.AttackTarget = xPosition;
            Obj_CombatRenderer.TType = TargetType.Gun;
        }else{
            Obj_CombatRenderer.TType = TargetType.None;
        }
        
        if(Obj_InputManager.InputSelectAxisDown &gt; 0){
            if(yPosition == 0)
            {
                // TODO: HE SHOT ME DOWN, BANG BANG!!!!
            }else{
                Obj_CombatRenderer.TType = TargetType.None;
                State = CombatUIState.AmmoMenu;
                xPosition = 2; // TODO: Set to current selected ammo type;
                AmmoAnimStoredXPos = xPosition;
                yPosition = 0;
                xMax = 4; // TODO: Set to list of ammo
                yMax = 1;
            }
        }else if(Obj_InputManager.InputSelectAxisDown &lt; 0){
            Obj_CombatRenderer.TType = TargetType.None;
            State = CombatUIState.CommandMenu;
            xPosition = 0;
            yPosition = 0;
            xMax = 0;
            yMax = 4;
        }
        break;
    }
    case CombatUIState.AmmoMenu:
    {        
        if(AmmoAnimStoredXPos != xPosition)
        {
            if(xPosition = 0 &amp;&amp; AmmoAnimStoredXPos == xMax)
            {
                AmmoAnimationMoveDir = -1;
            }
            else if(xPosition = xMax &amp;&amp; AmmoAnimStoredXPos == 0)
            {
                AmmoAnimationMoveDir = 1;
            }
            else if(AmmoAnimStoredXPos &lt; xPosition)
            {
                AmmoAnimationMoveDir = -1;
            }
            else if(AmmoAnimStoredXPos &gt; xPosition)
            {
                AmmoAnimationMoveDir = 1;
            }
            
            if(AmmoAnimationMoveDir &gt; 0){AmmoAnimationPosition =  0;}else{AmmoAnimationPosition = 1;}
            AmmoAnimStoredXPos = xPosition;
        }
        AmmoAnimationPosition += AmmoAnimationSpeed * AmmoAnimationMoveDir;        
        if(AmmoAnimationMoveDir &gt; 0 &amp;&amp; AmmoAnimationPosition &gt; 1){
            AmmoAnimationPosition = 1;
        }
        else if(AmmoAnimationMoveDir &lt; 0 &amp;&amp; AmmoAnimationPosition &lt; 0){
            AmmoAnimationPosition = 0;
        }
        
        if(Obj_InputManager.InputSelectAxisDown &gt; 0){
            if(yPosition == 0)
            {
                // TODO: Ammo Type Picking Here
            }else{
                State = CombatUIState.WeaponTargetMenu;
                xMax = instance_number(Obj_EnemyData) - 1;
                yMax = 1;
                xPosition = 0;
                yPosition = 1;
            }
        }else if(Obj_InputManager.InputSelectAxisDown &lt; 0){
            State = CombatUIState.WeaponTargetMenu;
            xMax = instance_number(Obj_EnemyData) - 1;
            yMax = 1;
            xPosition = 0;
            yPosition = 1;
        }
        break;
    }
}

// Animation Stuff //
HeaderJiggleTimer += 1;
if(HeaderJiggleTimer &gt;= HeaderJiggleTimerMax)
    HeaderJiggleTimer = 0;
    
HeaderOverlayPulseTimer += 1;

ArrowPulseTimer += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(bEnableDraw){    

    // Animation Stuff
    // Header Jiggle
    var r = sin(HeaderJiggleTimer / HeaderJiggleSpeed) * HeaderJiggleAmount;
    if(HeaderJiggleTimer / HeaderJiggleSpeed &gt; 4*pi)
        r = 0;
        
    var j = sin(HeaderOverlayPulseTimer/HeaderOverlayPulseSpeed) * HeaderOverlayPulseAmount;
    if(HeaderOverlayPulseTimer/HeaderOverlayPulseSpeed &gt; pi){
        HeaderOverlayPulseTimer = 0;
        HeaderOverlayRotation = random_range( -10, 10);
    }
        
    var i;
    var str;
    
    switch(State){
        case CombatUIState.CommandMenu:
        {
            // HEADER
            draw_sprite_ext( GUI_Combat_Command_Header, -1, 512, 39, 1.0, 1.0, r, c_white, 1.0);
            
            // MENU OPTIONS
            for(i = 0; i &lt;= yMax; i += 1)
            {
                switch(i)
                {
                    // WEAPON OPTION
                    case 0:
                    {
                        draw_sprite_ext( GUI_Combat_Command_WeaponBtn, -1, 610 - (MaxButtonDisplacement * Scr_SCurve(CommandButtonDisplacement[i])), 76 + (i * 40), 1.0, 1.0, 0.0, c_white, 1.0);
                        break;
                    }
                    // SKILL OPTION
                    case 1:
                    {
                        draw_sprite_ext( GUI_Combat_Command_SkillBtn, -1, 610 - (MaxButtonDisplacement * Scr_SCurve(CommandButtonDisplacement[i])), 76 + (i * 40), 1.0, 1.0, 0.0, c_white, 1.0);
                        break;
                    }
                    // ITEMS OPTION
                    case 2:
                    {
                        draw_sprite_ext( GUI_Combat_Command_ItemsBtn, -1, 610 - (MaxButtonDisplacement * Scr_SCurve(CommandButtonDisplacement[i])), 76 + (i * 40), 1.0, 1.0, 0.0, c_white, 1.0);
                        break;
                    }
                    // TALK OPTION
                    case 3:
                    {
                        draw_sprite_ext( GUI_Combat_Command_TalkBtn, -1, 610 - (MaxButtonDisplacement * Scr_SCurve(CommandButtonDisplacement[i])), 76 + (i * 40), 1.0, 1.0, 0.0, c_white, 1.0);
                        break;
                    }
                    // FLEE OPTION
                    case 4:
                    {
                        draw_sprite_ext( GUI_Combat_Command_FleeBtn, -1, 610 - (MaxButtonDisplacement * Scr_SCurve(CommandButtonDisplacement[i])), 76 + (i * 40), 1.0, 1.0, 0.0, c_white, 1.0);
                        break;
                    }
                }
            }

            // SELECT ARROW
            var s = sin(ArrowPulseTimer / 6);
            draw_sprite_ext( GUI_Combat_Command_Arrow, 0, 598 - (s * 8), 91 + lerp(SelectArrowLastPos, SelectArrowNewPos, Scr_SCurve(SelectArrowDisplacement)), lerp(1.4, 1.0, clamp(s, 0.0, 1.0)), lerp(1.2, 1.0, clamp(-s, -1.0, 0.0)), 0.0, c_white, 1.0);
            break;
        }
        case CombatUIState.WeaponTargetMenu:
        {
            // HEADER
            draw_sprite_ext( GUI_Combat_WeaponTarget_Header, -1, 534, 40, 1.0, 1.0, 0, c_white, 1.0);
            
            // FIRE!!
            draw_sprite_ext( GUI_Combat_WeaponTarget_Fire, -1, 531, 61, 1.0 + j, 1.0 + j, HeaderOverlayRotation, c_white, 1.0);
            
            // CHANGE AMMO
            draw_sprite_ext( GUI_Combat_WeaponTarget_ChangeAmmo, -1, 563, 320, 1.0, 1.0, r, c_white, 1.0);
            
            // CHANGE AMMO ARROW
            if(yPosition == 1)
            {
                var s = sin(ArrowPulseTimer / 6);
                draw_sprite_ext( GUI_Combat_Command_Arrow, 1, 454 - (s * 8), 332, lerp(1.4, 1.0, clamp(s, 0.0, 1.0)), lerp(1.2, 1.0, clamp(-s, -1.0, 0.0)), 0, c_white, 1.0);  
            }
            break;
        }
        case CombatUIState.AmmoMenu:
        {
            rFact = yPosition;
            
            // HEADER
            draw_sprite_ext( GUI_Combat_Ammo_Header, -1,  535, 58, 1.0, 1.0, r * (1 - rFact), c_white, 1.0);
            
            // FIRE
            draw_sprite_ext( GUI_Combat_Ammo_Fire, -1, 569, 318, 1.0, 1.0, r * (0 + rFact), c_white, 1.0);
            
            // DRAW THE AMMO TYPE ICONS
            var i;
            for(i = (xPosition - 3); i &lt;= (xPosition + 3); i += 1)
            {              
                var j = i;
                // Constrain J so that we don't try to draw nonexistent shit
                if(j &lt; 0){j += xMax + 1;}
                else if(j &gt; xMax){j -= xMax + 1;}
                
                /*
                    AmmoAnimationMoveDir = 1;
                    AmmoAnimationPosition = 0;
                    AmmoAnimationSpeed = 1/FastScrollIntervalTime;
                */
                
                var s = 1.0;                
                var xO = 0;
                
                var anim = AmmoAnimationPosition;
                
                // OH FUCK THIS IS GONNA BE MESSYYYYYYYY
                if(AmmoAnimationMoveDir &gt; 0){
                    if(i == (xPosition + 3)){s = 0.6; xO = lerp(40, -80, anim);}
                    else if(i == (xPosition + 2)){s = lerp(0.8, 0.6, AmmoAnimationPosition); xO = lerp(160, 40, anim);}
                    else if(i == (xPosition + 1)){s = lerp(0.6, 0.8, AmmoAnimationPosition); xO = lerp(320, 160, anim);}
                    else if(i == xPosition){s = lerp(0.8, 1.0, AmmoAnimationPosition); xO = lerp(480, 320, anim);}
                    else if(i == (xPosition - 1)){s = lerp(0.6, 0.8, AmmoAnimationPosition); xO = lerp(600, 480, anim);}
                    else if(i == (xPosition - 2)){s = 0.6; xO = lerp(720, 600, anim);}
                    else if(i == (xPosition - 3)){s = 0.0; xO = 1000} // Upper Dummy
                }else if(AmmoAnimationMoveDir &lt;= 0)
                {
                    if(i == (xPosition + 3)){s = 0.0; xO = -1000;} // Lower Dummy
                    else if(i == (xPosition + 2)){s = lerp(0.6, 0.6, AmmoAnimationPosition); xO = lerp(40, -80, anim);}
                    else if(i == (xPosition + 1)){s = lerp(0.8, 0.6, AmmoAnimationPosition); xO = lerp(160, 40, anim);}
                    else if(i == xPosition){s = lerp(1.0, 0.8, AmmoAnimationPosition); xO = lerp(320, 160, anim);}
                    else if(i == (xPosition - 1)){s = lerp(0.8, 0.6, AmmoAnimationPosition); xO = lerp(480, 320, anim);}
                    else if(i == (xPosition - 2)){s = 0.6; xO = lerp(600, 480, anim);}
                    else if(i == (xPosition - 3)){s = 0.6; xO = lerp(720, 600, anim);}
                }
                
                // Draw the sprite (TODO: CURRENTLY JUST DRAWS SOME LOOPY DUMMY SPRITE)
                draw_sprite_ext( GUI_Combat_Ammo_AmmoIcon, j, xO, 187, s, s, 1.0, c_white, 1.0);
            }
            
            // AMMO TYPE NAME
            var ammoname;
            
            draw_sprite_ext( GUI_Combat_Ammo_AmmoName, -1, 0, 272, 1, 1, 0, c_white, 1.0);            
            Scr_DrawText("#c0310270279mm Rounds", 20, 283, 0.8, GUI_Font_OldStyleKana);
            
            // AMMO TYPE DESC
            draw_sprite_ext( GUI_Combat_Ammo_AmmoDesc, -1, 0, 316, 1, 1, 0, c_white, 1.0);
            Scr_DrawText("#c031027027Light Physical Damage to One Enemy", 20, 328, 0.8, GUI_Font_OldStyleKana);
            
            // FIRE ARROW
            if(yPosition == 1)
            {
                var s = sin(ArrowPulseTimer / 6);
                draw_sprite_ext( GUI_Combat_Command_Arrow, 1, 454 - (s * 8), 332, lerp(1.4, 1.0, clamp(s, 0.0, 1.0)), lerp(1.2, 1.0, clamp(-s, -1.0, 0.0)), 0, c_white, 1.0);  
            }
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
