<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Obj_UIMaster</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Define UI Enum
enum CombatUIState {
    CommandMenu,
    SkillMenu,
    GunMenu,
    TargetMenu,
    ItemMenu,
    CommuneMenu,
    CheckMenu,
    GuardMenu,
    FleeMenu
};

// Call Super Function
event_inherited();

// Set x and y max to that of the command menu on start.
xMax = 0;
yMax = 3;

State = CombatUIState.CommandMenu;

// Stored Stuff
StoredCommandMenuPositon = 0; // Used when returning to the command menu from the Flee or Guard menu
StoredSkillMenuPosition = 0;
bUsingGun = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Call Super Function
event_inherited();

// Select and Back
if(Obj_InputManager.InputSelectAxisDown != 0)
{
    switch(State)
    {
        case CombatUIState.CommandMenu:
        {
            // If Select Button is Pressed
            if(Obj_InputManager.InputSelectAxisDown &gt; 0)
            {
                switch(yPosition)
                {
                    case 0: // Skill Menu
                    {
                        xMax = 0;
                        yMax = 1; // SHOULD BE CHANGED TO NUMBER OF SKILLS PLUS TWO (For Gun + Basic Attack)
                        xPosition = 0;
                        yPosition = 0;
                        State = CombatUIState.SkillMenu;
                        break;
                    }
                    case 1: // Item Menu
                    {
                        xMax = 0;
                        yMax = 0; // SHOULD BE EQUAL TO THE NUMBER OF ITEMS IN THE PLAYER'S INVENTORY THAT ARE BATTLE USABLE
                        xPosition = 0;
                        yPosition = 0;
                        State = CombatUIState.ItemMenu;
                        break;
                    }
                    case 2: // Commune Menu
                    {
                        xMax = 0;
                        yMax = 0; // SHOULD BE EQUAL TO THE NUMBER OF CONVERSATION TOPICS THE PLAYER CAN SELECT
                        xPosition = 0;
                        yPosition = 0;
                        State = CombatUIState.CommuneMenu;
                        break;
                    }
                    case 3: // Check Menu
                    {
                        xMax = 0; // SHOULD BE EQUAL TO THE NUMBER OF ENEMIES ON THE FIELD
                        yMax = 0;
                        xPosition = 0;
                        yPosition = 0;
                        State = CombatUIState.CheckMenu;
                        break;
                    }
                }
            }
            break;
        }
        case CombatUIState.SkillMenu:
        {
            // If Select Button is Pressed
            if(Obj_InputManager.InputSelectAxisDown &gt; 0)
            {
                StoredSkillMenuPosition = yPosition;
                switch(yPosition)
                {
                    case 0: // Skill Menu
                    {
                        xMax = 0;
                        yMax = 0; // SHOULD BE EQUAL TO THE NUMBER OF ENEMIES ON THE FIELD
                        xPosition = 0;
                        yPosition = 0;
                        State = CombatUIState.TargetMenu;
                        bUsingGun = false;
                        break;
                    }
                    case 1: // Item Menu
                    {
                        xMax = 0;
                        yMax = 0; // SHOULD BE EQUAL TO THE NUMBER OF ENEMIES ON THE FIELD
                        xPosition = 0;
                        yPosition = 0;
                        State = CombatUIState.TargetMenu;
                        bUsingGun = true;
                        break;
                    }
                }
            }
            // If Back Button Pressed
            if(Obj_InputManager.InputSelectAxisDown &lt; 0)
            {
                State = CombatUIState.CommandMenu;
                xMax = 0;
                yMax = 3;
                xPosition = 0;
                yPosition = 0;
            }
            break;
        }
        case CombatUIState.TargetMenu:
        {
            // If Back Button Pressed
            if(Obj_InputManager.InputSelectAxisDown &lt; 0)
            {
                State = CombatUIState.SkillMenu;
                xMax = 0;
                yMax = 1;
                xPosition = 0;
                yPosition = StoredSkillMenuPosition;
            }
            break;
        }
        case CombatUIState.ItemMenu:
        {
            // If Back Button Pressed
            if(Obj_InputManager.InputSelectAxisDown &lt; 0)
            {
                State = CombatUIState.CommandMenu;
                xMax = 0;
                yMax = 3;
                xPosition = 0;
                yPosition = 1;
            }
            break;
        }
        case CombatUIState.CommuneMenu:
        {
            // If Back Button Pressed
            if(Obj_InputManager.InputSelectAxisDown &lt; 0)
            {
                State = CombatUIState.CommandMenu;
                xMax = 0;
                yMax = 3;
                xPosition = 0;
                yPosition = 2;
            }
            break;
        }
        case CombatUIState.CheckMenu:
        {
            // If Back Button Pressed
            if(Obj_InputManager.InputSelectAxisDown &lt; 0)
            {
                State = CombatUIState.CommandMenu;
                xMax = 0;
                yMax = 3;
                xPosition = 0;
                yPosition = 3;
            }
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i;
var str;

switch(State){
    case CombatUIState.CommandMenu:
    {
        for(i = -1; i &lt;= yMax; i += 1)
        {
            switch(i)
            {
                case -1:
                {
                    // WILL BE REPLACED LATER *****VERY DEBUG*****
                    str = "COMMAND"
                        
                    draw_text(10, 30 + (20 * i), str);
                    break;
                }
                case 0:
                {
                    // WILL BE REPLACED LATER *****VERY DEBUG*****
                    if(yPosition = i)
                        str = " &gt;Skill"
                    else
                        str = "Skill"
                        
                    draw_text(10, 30 + (20 * i), str);
                    break;
                }
                case 1:
                {
                    // WILL BE REPLACED LATER *****VERY DEBUG*****
                    if(yPosition = i)
                        str = " &gt;Item*"
                    else
                        str = "Item*"
                        
                    draw_text(10, 30 + (20 * i), str);
                    break;
                }
                case 2:
                {
                    // WILL BE REPLACED LATER *****VERY DEBUG*****
                    if(yPosition = i)
                        str = " &gt;Commune*"
                    else
                        str = "Commune*"
                        
                    draw_text(10, 30 + (20 * i), str);
                    break;
                }
                case 3:
                {
                    // WILL BE REPLACED LATER *****VERY DEBUG*****
                    if(yPosition = i)
                        str = " &gt;Check*"
                    else
                        str = "Check*"
                        
                    draw_text(10, 30 + (20 * i), str);
                    break;
                }
            }
        }
        break;
    }
    case CombatUIState.SkillMenu:
    {
        for(i = -1; i &lt;= yMax; i += 1)
        {
            switch(i)
            {
                case -1:
                {
                    // WILL BE REPLACED LATER *****VERY DEBUG*****
                    str = "SKILL"
                        
                    draw_text(10, 30 + (20 * i), str);
                    break;
                }
                case 0:
                {
                    // WILL BE REPLACED LATER *****VERY DEBUG*****
                    if(yPosition = i)
                        str = " &gt;Strike*"
                    else
                        str = "Strike*"
                        
                    draw_text(10, 30 + (20 * i), str);
                    break;
                }
                case 1:
                {
                    // WILL BE REPLACED LATER *****VERY DEBUG*****
                    if(yPosition = i)
                        str = " &gt;Gun*"
                    else
                        str = "Gun*"
                        
                    draw_text(10, 30 + (20 * i), str);
                    break;
                }
            }
        }
        break;
    }
    case CombatUIState.TargetMenu:
    {
        for(i = -1; i &lt;= yMax; i += 1)
        {
            switch(i)
            {
                case -1:
                {
                    // WILL BE REPLACED LATER *****VERY DEBUG*****
                    str = "TARGET"
                        
                    draw_text(10, 30 + (20 * i), str);
                    break;
                }
            }
        }
        
        if(bUsingGun)
        {
            str = "C to switch Ammo"
                        
            draw_text(10, 160, str);
        }
        break;
    }
    case CombatUIState.ItemMenu:
    {
        for(i = -1; i &lt;= yMax; i += 1)
        {
            switch(i)
            {
                case -1:
                {
                    // WILL BE REPLACED LATER *****VERY DEBUG*****
                    str = "ITEM"
                        
                    draw_text(10, 30 + (20 * i), str);
                    break;
                }
            }
        }
        break;
    }
    case CombatUIState.CommuneMenu:
    {
        for(i = -1; i &lt;= yMax; i += 1)
        {
            switch(i)
            {
                case -1:
                {
                    // WILL BE REPLACED LATER *****VERY DEBUG*****
                    str = "COMMUNE"
                        
                    draw_text(10, 30 + (20 * i), str);
                    break;
                }
            }
        }
        break;
    }
    case CombatUIState.CheckMenu:
    {
        for(i = -1; i &lt;= yMax; i += 1)
        {
            switch(i)
            {
                case -1:
                {
                    // WILL BE REPLACED LATER *****VERY DEBUG*****
                    str = "CHECK"
                        
                    draw_text(10, 30 + (20 * i), str);
                    break;
                }
            }
        }
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
