<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Obj_UIMaster</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Define UI Enum
enum CombatUIState {
    CommandMenu,
    SkillMenu,
    GunMenu,
    TargetMenu,
    ItemMenu,
    CommuneMenu,
    CheckMenu,
    GuardMenu,
    FleeMenu
};

// Call Super Function
event_inherited();

// Set x and y max to that of the command menu on start.
xMax = 0;
yMax = 4;

State = CombatUIState.CommandMenu;

/* Animation Stuff */

// Header Jiggle
HeaderJiggleTimer = 0;
HeaderJiggleTimerMax = 90;
HeaderJiggleSpeed = 2;
HeaderJiggleAmount = 4;

CommandButtonDisplacement[0] = 0;
CommandButtonDisplacement[1] = 0;
CommandButtonDisplacement[2] = 0;
CommandButtonDisplacement[3] = 0;
CommandButtonDisplacement[4] = 0;
MaxButtonDisplacement = 27;
ButtonDisplacementSpeed = 0.15;

SelectArrowLastPos = yPosition * 40;
SelectArrowNewPos = SelectArrowLastPos;
SelectArrowDisplacement = 0;
SelectArrowSpeed = 0.15;

ArrowPulseTimer = 0;

// Stored Stuff
StoredCommandMenuPositon = 0; // Used when returning to the command menu from the Flee or Guard menu
StoredSkillMenuPosition = 0;
bUsingGun = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Call Super Function
event_inherited();

switch(State)
{
    case CombatUIState.CommandMenu:
    {
        // Button Displacement
        var i;
        for (i = 0; i &lt; 5; i++)
        {
            if(i == yPosition)
            {
                CommandButtonDisplacement[i] += ButtonDisplacementSpeed;
                
                if(CommandButtonDisplacement[i] &gt;= 1.0)
                    CommandButtonDisplacement[i] = 1.0;
            }else{
                CommandButtonDisplacement[i] -= ButtonDisplacementSpeed;
            
                if(CommandButtonDisplacement[i] &lt;= 0)
                    CommandButtonDisplacement[i] = 0;
            }
        }
        
        // Arrow Movement
        if(yPosition * 40 != SelectArrowNewPos){
            SelectArrowLastPos = SelectArrowNewPos;
            SelectArrowNewPos = yPosition * 40;
            SelectArrowDisplacement = 0;
            ArrowPulseTimer = -1;
        }
        SelectArrowDisplacement += SelectArrowSpeed;
        if(SelectArrowDisplacement &gt;= 1.0)
            SelectArrowDisplacement = 1.0;
            
        ArrowPulseTimer += 1;
            
        show_debug_message(string(SelectArrowDisplacement));
        break;
    }
}

// Animation Stuff //
HeaderJiggleTimer += 1;
if(HeaderJiggleTimer &gt; HeaderJiggleTimerMax)
    HeaderJiggleTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(bEnableDraw){
    // Animation Stuff
    // Header Jiggle
    var r = sin(HeaderJiggleTimer / HeaderJiggleSpeed) * HeaderJiggleAmount;
    if(HeaderJiggleTimer / HeaderJiggleSpeed &gt; 4)
        r = 0;
        
    var i;
    var str;
    
    switch(State){
        case CombatUIState.CommandMenu:
        {
            // HEADER
            draw_sprite_ext( GUI_Combat_Command_Header, -1, 512, 39, 1.0, 1.0, r, c_white, 1.0);
            
            // MENU OPTIONS
            for(i = 0; i &lt;= yMax; i += 1)
            {
                switch(i)
                {
                    // WEAPON OPTION
                    case 0:
                    {
                        draw_sprite_ext( GUI_Combat_Command_WeaponBtn, -1, 610 - (MaxButtonDisplacement * Scr_SCurve(CommandButtonDisplacement[i])), 76 + (i * 40), 1.0, 1.0, 0.0, c_white, 1.0);
                        break;
                    }
                    // SKILL OPTION
                    case 1:
                    {
                        draw_sprite_ext( GUI_Combat_Command_SkillBtn, -1, 610 - (MaxButtonDisplacement * Scr_SCurve(CommandButtonDisplacement[i])), 76 + (i * 40), 1.0, 1.0, 0.0, c_white, 1.0);
                        break;
                    }
                    // ITEMS OPTION
                    case 2:
                    {
                        draw_sprite_ext( GUI_Combat_Command_ItemsBtn, -1, 610 - (MaxButtonDisplacement * Scr_SCurve(CommandButtonDisplacement[i])), 76 + (i * 40), 1.0, 1.0, 0.0, c_white, 1.0);
                        break;
                    }
                    // TALK OPTION
                    case 3:
                    {
                        draw_sprite_ext( GUI_Combat_Command_TalkBtn, -1, 610 - (MaxButtonDisplacement * Scr_SCurve(CommandButtonDisplacement[i])), 76 + (i * 40), 1.0, 1.0, 0.0, c_white, 1.0);
                        break;
                    }
                    // FLEE OPTION
                    case 4:
                    {
                        draw_sprite_ext( GUI_Combat_Command_FleeBtn, -1, 610 - (MaxButtonDisplacement * Scr_SCurve(CommandButtonDisplacement[i])), 76 + (i * 40), 1.0, 1.0, 0.0, c_white, 1.0);
                        break;
                    }
                }
            }

            // SELECT ARROW
            var s = sin(ArrowPulseTimer / 6);
            draw_sprite_ext( GUI_Combat_Command_Arrow, -1, 598 - (s * 8), 91 + lerp(SelectArrowLastPos, SelectArrowNewPos, Scr_SCurve(SelectArrowDisplacement)), lerp(1.4, 1.0, clamp(s, 0.0, 1.0)), lerp(1.2, 1.0, clamp(-s, -1.0, 0.0)), 0.0, c_white, 1.0);
        /*
            SelectArrowLastPos = yPosition * 40 + 76;
            SelectArrowNewPos = SelectArrowLastPos;
            SelectArrowDisplacement = 0;
            SelectArrowSpeed = 0.15;
        */
            /*
            for(i = -1; i &lt;= yMax; i += 1)
            {
                switch(i)
                {
                    case -1:
                    {
                        // WILL BE REPLACED LATER *****VERY DEBUG*****
                        str = "COMMAND"
                            
                        draw_text(10, 30 + (20 * i), str);
                        break;
                    }
                    case 0:
                    {
                        // WILL BE REPLACED LATER *****VERY DEBUG*****
                        if(yPosition = i)
                            str = " &gt;Skill"
                        else
                            str = "Skill"
                            
                        draw_text(10, 30 + (20 * i), str);
                        break;
                    }
                    case 1:
                    {
                        // WILL BE REPLACED LATER *****VERY DEBUG*****
                        if(yPosition = i)
                            str = " &gt;Item*"
                        else
                            str = "Item*"
                            
                        draw_text(10, 30 + (20 * i), str);
                        break;
                    }
                    case 2:
                    {
                        // WILL BE REPLACED LATER *****VERY DEBUG*****
                        if(yPosition = i)
                            str = " &gt;Commune*"
                        else
                            str = "Commune*"
                            
                        draw_text(10, 30 + (20 * i), str);
                        break;
                    }
                    case 3:
                    {
                        // WILL BE REPLACED LATER *****VERY DEBUG*****
                        if(yPosition = i)
                            str = " &gt;Check*"
                        else
                            str = "Check*"
                            
                        draw_text(10, 30 + (20 * i), str);
                        break;
                    }
                }
            }
            */
            break;
        }
        case CombatUIState.SkillMenu:
        {
            for(i = -1; i &lt;= yMax; i += 1)
            {
                switch(i)
                {
                    case -1:
                    {
                        // WILL BE REPLACED LATER *****VERY DEBUG*****
                        str = "SKILL"
                            
                        draw_text(10, 30 + (20 * i), str);
                        break;
                    }
                    case 0:
                    {
                        // WILL BE REPLACED LATER *****VERY DEBUG*****
                        if(yPosition = i)
                            str = " &gt;Strike*"
                        else
                            str = "Strike*"
                            
                        draw_text(10, 30 + (20 * i), str);
                        break;
                    }
                    case 1:
                    {
                        // WILL BE REPLACED LATER *****VERY DEBUG*****
                        if(yPosition = i)
                            str = " &gt;Gun*"
                        else
                            str = "Gun*"
                            
                        draw_text(10, 30 + (20 * i), str);
                        break;
                    }
                }
            }
            break;
        }
        case CombatUIState.TargetMenu:
        {
            for(i = -1; i &lt;= yMax; i += 1)
            {
                switch(i)
                {
                    case -1:
                    {
                        // WILL BE REPLACED LATER *****VERY DEBUG*****
                        str = "TARGET"
                            
                        draw_text(10, 30 + (20 * i), str);
                        break;
                    }
                }
            }
            
            if(bUsingGun)
            {
                str = "C to switch Ammo"
                            
                draw_text(10, 160, str);
            }
            break;
        }
        case CombatUIState.ItemMenu:
        {
            for(i = -1; i &lt;= yMax; i += 1)
            {
                switch(i)
                {
                    case -1:
                    {
                        // WILL BE REPLACED LATER *****VERY DEBUG*****
                        str = "ITEM"
                            
                        draw_text(10, 30 + (20 * i), str);
                        break;
                    }
                }
            }
            break;
        }
        case CombatUIState.CommuneMenu:
        {
            for(i = -1; i &lt;= yMax; i += 1)
            {
                switch(i)
                {
                    case -1:
                    {
                        // WILL BE REPLACED LATER *****VERY DEBUG*****
                        str = "COMMUNE"
                            
                        draw_text(10, 30 + (20 * i), str);
                        break;
                    }
                }
            }
            break;
        }
        case CombatUIState.CheckMenu:
        {
            for(i = -1; i &lt;= yMax; i += 1)
            {
                switch(i)
                {
                    case -1:
                    {
                        // WILL BE REPLACED LATER *****VERY DEBUG*****
                        str = "CHECK"
                            
                        draw_text(10, 30 + (20 * i), str);
                        break;
                    }
                }
            }
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
