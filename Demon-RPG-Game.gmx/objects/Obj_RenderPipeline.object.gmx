<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Initialize the 3d renderer
d3d_start();
d3d_set_hidden(true); // Enable hidden face culling
d3d_set_perspective(true); // By default use Perspective mode
d3d_set_culling(false); // Enable Backface Culling
d3d_set_zwriteenable(true); // Use the Z-Buffer for depth culling
texture_set_interpolation(false);

// Render Settings
ScreenWidth =  640;
ScreenHeight = 360;
FOV = 40.0;

// Surface Initialization
SceneSurface = surface_create(ScreenWidth, ScreenHeight);
EffectsSurface = surface_create(ScreenWidth, ScreenHeight);
GUISurface = surface_create(ScreenWidth, ScreenHeight);
AppSurface = surface_create(ScreenWidth, ScreenHeight);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d3d_end();

surface_free(SceneSurface);
surface_free(EffectsSurface);
surface_free(GUISurface);
surface_free(AppSurface);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// SCENE DRAWING
// Buffer for drawing all worldspace objects and scenery
if(surface_exists(SceneSurface))
{
    surface_set_target(SceneSurface);
    draw_clear(c_black);
    
    draw_set_alpha(1);
    draw_set_color(c_white);
    
    var bDrawCombat;    
    if(instance_exists(Obj_CombatManager))
    {
        bDrawCombat = Obj_CombatManager.bDrawCombatScene
    }else{
        bDrawCombat = false;
    }
    
    Scr_Reset3dView();
    
    if(bDrawCombat){  
        // Render combat scene
        with(Obj_CombatRenderer)
        {
            bEnableDraw = true;
            event_perform(ev_draw, 0);
            bEnableDraw = false;
        }
    }else{
        // Render all nesecary objects in the scene
        with(Obj_Renderer)
        {
            bEnableDraw = true;
            event_perform(ev_draw, 0);
            bEnableDraw = false;
        }
    }
    surface_reset_target();
}

// EFFECTS DRAWING
// Buffer for applying overlay effects to the Scene Drawing
if(surface_exists(EffectsSurface))
{
    surface_set_target(EffectsSurface);
    
    draw_clear_alpha(c_black, 0.0);
    d3d_set_projection_ortho(0,0,ScreenWidth,ScreenHeight,0);
    
    draw_set_alpha(1);
    draw_set_color(c_white);
    
    // Render all currently applied image effects
    with(Obj_Effect)
    {
        bEnableDraw = true;
        event_perform(ev_draw, 0);
        bEnableDraw = false;
    }
    surface_reset_target();
}

// UI DRAWING
// Buffer for drawing all elements on the UI layer
if(surface_exists(GUISurface))
{
    surface_set_target(GUISurface);

    draw_clear_alpha(c_black, 0.0);
    d3d_set_projection_ortho(0,0,ScreenWidth,ScreenHeight,0);
    
    draw_set_alpha(1);
    draw_set_color(c_white);
    
    with(Obj_UIMaster){
        bEnableDraw = true;
        event_perform(ev_draw, 0);
        bEnableDraw = false;
    }
    with(Obj_PlayerStatsHUD){
        PlayerStatsEnableDraw = true;
        event_perform(ev_draw, 0);
        PlayerStatsEnableDraw = false;
    }
    
    surface_reset_target();
}

// APP SURFACE
// Putting everything together
if(surface_exists(AppSurface))
{    
    surface_set_target(AppSurface);
    
    draw_clear_alpha(c_black, 0.0);
    d3d_set_projection_ortho(0,0,ScreenWidth,ScreenHeight,0);
    
    draw_set_alpha(1);
    draw_set_color(c_white);
    
    if(surface_exists(SceneSurface))
    {
        draw_surface(SceneSurface, 0, 0);
    }else{
        show_debug_message("ERROR: SCENE SURFACE DOES NOT EXIST, ATTEMPTING TO REALLOCATE");
        SceneSurface = surface_create(ScreenWidth, ScreenHeight);
    }
    
    if(surface_exists(EffectsSurface))
    {
        draw_surface(EffectsSurface, 0, 0);
    }else{
        show_debug_message("ERROR: EFFECTS SURFACE DOES NOT EXIST, ATTEMPTING TO REALLOCATE");
        EffectsSurface = surface_create(ScreenWidth, ScreenHeight);
    }
    
    if(surface_exists(GUISurface))
    {
        draw_surface(GUISurface, 0, 0);
    }else{
        show_debug_message("ERROR: GUI SURFACE DOES NOT EXIST, ATTEMPTING TO REALLOCATE");
        GUISurface = surface_create(ScreenWidth, ScreenHeight);
    }
    
    surface_reset_target();
}

// FINAL DRAW CALL    
if(surface_exists(AppSurface))
{       
    draw_clear_alpha(c_black, 0.0);
    d3d_set_projection_ortho(0,0,ScreenWidth,ScreenHeight,0);
    
    draw_set_alpha(1);
    draw_set_color(c_white);

    draw_surface(AppSurface, 0, 0);
}else{
    show_debug_message("ERROR: APP SURFACE DOES NOT EXIST, ATTEMPTING TO REALLOCATE");
    AppSurface = surface_create(ScreenWidth, ScreenHeight);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
