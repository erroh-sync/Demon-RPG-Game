<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Spr_Enemy_TinyKnight_TakeDamage</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Obj_EnemyData</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// STATS 
Hitpoints = 8;
MaxHitpoints = 8;
Strength = 4;
Endurance = 10;
Agility = 2;
Luck = 6;

ShieldedEndurance = 15;
PeekingEndurance = 3;

// SKILLS
SkillArray[0] = 0;
SkillArray[1] = 6;
SkillArray[2] = 1;
SkillArray[3] = 6;
SkillArray[4] = 6;
LastSkillIndex = 4;

// DIALOUGE DATA
// DIALOUGE DATA
NameStr = "Tiny Knight";

StartDialougeString[0] = "Wh-who goes there??"

QuestionIndex[0, 0] = "B-be you f-friend or f-foe??"; // Question name
QuestionIndex[0, 1] = "Friend"; // Best Answer
QuestionIndex[0, 2] = "Huh? Y-you sure?#/I wouldn't have p-picked it..."; // Best Response
QuestionIndex[0, 3] = "Passerby"; // Neutral Answer
QuestionIndex[0, 4] = "Hmm? W-what's a traveller doing in a p-place#/like this?"; // Neutral Response
QuestionIndex[0, 5] = "Foe"; // Incorrect Answer
QuestionIndex[0, 6] = "T-then I hope you shall be a w-worthy one!"; // Incorrect Response

DialougeFailedString = "E-enough of this!#/E-engarde!"
DialougeSuccededString = "Yes! Take this skill!"

RejectCommunication = false;

TutorSkillIndex = 6;

// GENERAL ANIMATION
BounceTimer = random(100);
ShieldTimer = random(100);

AnimationSpeed = 0.12;

// IDLE BREAK ANIMATION
IdleBreakMaxTimer = 300;
IdleBreakTimer = random(IdleBreakMaxTimer);
IdleBreakFrame = -0.2;
IdleBreakFrameRate = 0.01;

// MISCELANEOUS
AimOffset = 20;

DrawSize = 32;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// GENERAL ANIMATION
if(IdleBreakTimer &gt; 0){
    BounceTimer += AnimationSpeed*AnimPlaySpeed;
    ShieldTimer += AnimationSpeed*AnimPlaySpeed;
}else{
    BounceTimer += (AnimationSpeed*AnimPlaySpeed)/2;
    ShieldTimer += (AnimationSpeed*AnimPlaySpeed)/2;
}

// IDLE BREAK ANIMATION
IdleBreakTimer -= 1;
if(IdleBreakTimer &lt; 0)
{
    IdleBreakFrame += IdleBreakFrameRate*AnimPlaySpeed;
    if(IdleBreakFrame &gt;= pi + 0.2)
    {
        IdleBreakFrame = -0.2;
        IdleBreakTimer = IdleBreakMaxTimer;  
    }
}

// PEEKING ENDURANCE
if(IdleBreakTimer &gt; 0){
    Endurance = ShieldedEndurance;
}else{
    Endurance = PeekingEndurance;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(bEnableDraw)
{
    // DRAW TO SURFACE
    if(surface_exists(TextureSurface))
    {
        surface_set_target(TextureSurface);

        draw_clear_alpha(c_black, 0.0);
        d3d_set_projection_ortho(0,0,DrawResolution,DrawResolution,0);
        
        draw_set_alpha(1);
        draw_set_color(c_white);
        
        /*
            DRAW CODE FOR ---- ENEMY
        */
        if((FlickerTimer) % 2  == 0){        
            if(FlickerTimer &gt; 0 || (Hitpoints &lt;= 0 &amp;&amp; Hitpoints &gt; -9999))
            {
                // DRAW HURT SPRITE
                draw_sprite_ext(Spr_Enemy_TinyKnight_TakeDamage, 0, DrawResolution/2, DrawResolution, 1.0, 1.0, 0.0, c_white, DeathAnimTimer/DeathAnimMaxTimer);
            }
            else
            {
                // IDLE BREAK
                var IdleBreakX = clamp(sin(clamp(IdleBreakFrame, 0, pi)) * 48, 0, 24);
            
                // FEET
                var FeetWobbleX = sin(BounceTimer/2) * 0.5;                
                draw_sprite_ext(Spr_Enemy_TinyKnight_Feet, 0, 58 + FeetWobbleX - IdleBreakX, DrawResolution, 1.0, 1.0, 0.0, c_white, DeathAnimTimer/DeathAnimMaxTimer);
                
                // BODY
                var BodyWobbleX = sin(BounceTimer/2) * 1;
                var BodyWobbleY = cos(BounceTimer/2) * 3;
                draw_sprite_ext(Spr_Enemy_TinyKnight_Body, 0, 57 + BodyWobbleX - IdleBreakX, 110 + BodyWobbleY, 1.0, 1.0, 0.0, c_white, DeathAnimTimer/DeathAnimMaxTimer);
                
                // HEAD
                var HeadWobbleX = sin(BounceTimer/2) * 2;
                var HeadWobbleY = cos(BounceTimer/2) * 4;
                draw_sprite_ext(Spr_Enemy_TinyKnight_Head, 0, 57 + HeadWobbleX - IdleBreakX, 93 + HeadWobbleY, 1.0, 1.0, 0.0, c_white, DeathAnimTimer/DeathAnimMaxTimer);
                
                // HEAD
                var TassleYSquish = cos(BounceTimer/2) * 0.1;
                draw_sprite_ext(Spr_Enemy_TinyKnight_Tassle, 0, 58 + HeadWobbleX - IdleBreakX, 74 + HeadWobbleY, 1.0, 1.0 + TassleYSquish, 0.0, c_white, DeathAnimTimer/DeathAnimMaxTimer);

                // SHIELD
                var ShieldWobbleX = sin(ShieldTimer/8) * 8;
                var ShieldWobbleY = sin(ShieldTimer/4) * 4;
                draw_sprite_ext(Spr_Enemy_TinyKnight_Shield, 0, 74 + ShieldWobbleX, 90 + ShieldWobbleY, 1.0, 1.0, 0.0, c_white, DeathAnimTimer/DeathAnimMaxTimer);
            }
        }    
        
        surface_reset_target();
        Scr_Reset3dView();
    }else{
        TextureSurface = surface_create(DrawResolution,DrawResolution);
    }
    
    event_inherited();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
