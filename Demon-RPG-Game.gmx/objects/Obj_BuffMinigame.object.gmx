<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>GUI_Combat_Minigames_BuffMinigame_BoostArrow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Obj_CombatMinigameMaster</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

MaxTime = 300;
CurrentTime = MaxTime;

// INPUT
CurrentReqKey = 4;
IncreaseDir = 1;

// CRANK
CrankRot = 0;
CrankRotSpeed = 0;
CrankRotImpulse = 0.5;
CrankRotDrag = 0.05;
CrankRotTerminal = 20;

// SCORING
NumQuaterTurns = 0;
OkayThreshold = 10;
GoodThreshold = 15;
GreatThreshold = 23;
PefectThreshold = 35;
bTalliedYet = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// INPUT
if(CurrentTime &gt; 0){
    var Cont = false;
    switch(CurrentReqKey){
        case 1:
        {
            if(Obj_InputManager.InputVerticalAxisDown &gt; 0) Cont = true;
            break;
        }
        case 2:
        {
            if(Obj_InputManager.InputHorizontalAxisDown &lt; 0) Cont = true;
            break;
        }
        case 3:
        {
            if(Obj_InputManager.InputVerticalAxisDown &lt; 0) Cont = true;
            break;
        }
        case 4:
        {
            if(Obj_InputManager.InputHorizontalAxisDown &gt; 0) Cont = true;
            break;
        }
    }
    if(Cont){
        CurrentReqKey += IncreaseDir;
        CrankRotSpeed += CrankRotImpulse;
        NumQuaterTurns += 1;
        if(CurrentReqKey &gt; 4)
            CurrentReqKey = 1;
        else if(CurrentReqKey &lt; 1)
            CurrentReqKey = 4;
    }
    
    // SPAWN ARROWS
    if(irandom_range(0, lerp(100, 20, CrankRotSpeed/CrankRotTerminal))&lt; 10 &amp;&amp; NumQuaterTurns &gt;= OkayThreshold)
    {
        if(IncreaseDir &gt; 0)
            instance_create(320 - irandom_range(-128, 128), 180 - irandom_range(-128, 64), Obj_CFX_BuffArrow);
        else
            instance_create(320 - irandom_range(-128, 128), 180 - irandom_range(128, -64), Obj_CFX_DeBuffArrow);
    }
}else{
    if(!bTalliedYet)
    {
        if(NumQuaterTurns &gt;= PefectThreshold)
        {
            TextType = MinigamePopupText.empt_Perfect;
            Obj_AttackUsageData.Power = 1.5;
        }
        else if(NumQuaterTurns &gt;= GreatThreshold)
        {
            TextType = MinigamePopupText.empt_Great;
            Obj_AttackUsageData.Power = 1.0;
        }
        else if(NumQuaterTurns &gt;= GoodThreshold)
        {
            TextType = MinigamePopupText.empt_Good;
            Obj_AttackUsageData.Power = 0.75;
        }
        else if(NumQuaterTurns &gt;= OkayThreshold)
        {
            TextType = MinigamePopupText.empt_Okay;
            Obj_AttackUsageData.Power = 0.5;
        }
        else
        {
            TextType = MinigamePopupText.empt_Miss;
            Obj_AttackUsageData.Power = 0.0;
        }
        
        // Show Popup Text
        TextOriginX = 320;
        TextOriginY = 180;
        TextDirX = 0;
        TextDirY = 0;
        TextTimer = TextTimerMax;
        
        bTalliedYet = true;
    }
}

// CRANK
CrankRotSpeed = clamp(CrankRotSpeed - CrankRotDrag, 0, CrankRotTerminal);
CrankRot += CrankRotSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(bEnableDraw){ 
    event_inherited();
    
    // DRAW PARTICLES
    with(Obj_CombatFXMaster)
    {
        bShouldDraw = true;
        event_perform(ev_draw, 0);
        bShouldDraw = false;
    }
    
    // CRANK
        draw_sprite_ext(GUI_Combat_Minigames_BuffMinigame_Crank, 0, 320, 180, 1.0, 1.0, CrankRot * -IncreaseDir, c_white, FadeAlpha);
    
    // BACKING
    draw_sprite_ext(GUI_Combat_Minigames_BuffMinigame, 0, 320, 180, 1.0, 1.0, 0.0, c_white, FadeAlpha);
    
    // RADIAL BUTTONS
    for(var i = 1; i &lt;= 4; i += 1)
    {
        var c = c_gray;
        if(i == CurrentReqKey)
            c = c_white;
        draw_sprite_ext(GUI_Combat_Minigames_BuffMinigame, i, 320, 180, 1.0, 1.0, 0.0, c, FadeAlpha);
    }
    
    __draw_text( 25,180,string(CrankRotSpeed), Spr_Font_MilleniumFont, 0.3, 0);
    
    Scr_DrawMinigamePopupText();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
