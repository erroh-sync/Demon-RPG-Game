<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Spr_Debug_PlayerOverworld</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum Direction {
    nullDir = -1,
    DownReset = -90,
    Left = 0,
    Up = 90,
    Right = 180,
    Down = 270,
    LeftReset = 360
};

FaceDirection = Direction.Left;
MoveDirection = Direction.nullDir;
RelativeMoveDirection = Direction.nullDir;

MaxStepDistance = 16;
DistanceTraveledThisStep = 0;
MoveSpeed = 1;
bOkayToMove = true;

bRotationalStep = false;
RotationSpeed = 5;
MaxRotationStep = 90;
DistanceRotatedThisStep = 0;
RotationDirection = 0;

z = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Movement //
if(Scr_OverworldAcceptInput()){
    if(bOkayToMove)
    {
        // Check key presses and set a new target
        if(Obj_InputManager.InputShoulderAxis != 0 || Obj_InputManager.InputVerticalAxis != 0)
        {
            if(Obj_InputManager.InputShoulderAxis &gt; 0)
            {
                MoveDirection = Direction.Right;
            }else if(Obj_InputManager.InputShoulderAxis &lt; 0)
            {
                MoveDirection = Direction.Left;
            }
            if(Obj_InputManager.InputVerticalAxis &lt; 0)
            {
                MoveDirection = Direction.Up;
            }else if(Obj_InputManager.InputVerticalAxis &gt; 0)
            {
                MoveDirection = Direction.Down;
            }
            
            // Calculate the direction we will be moving in
            RelativeMoveDirection = MoveDirection;
            switch(FaceDirection)
            {
                case Direction.Left:
                {
                    RelativeMoveDirection += 90;
                    break;
                }
                case Direction.Right:
                {
                    RelativeMoveDirection -= 90;
                    break;
                }
                case Direction.Down:
                {
                    RelativeMoveDirection += 180;
                    break;
                }
            }
            
            // Make sure we don't end up outside of our main 4 directions
            if(RelativeMoveDirection &gt;= 360)
            {
                RelativeMoveDirection -= 360;
            }else if(RelativeMoveDirection &lt; 0)
            {
                RelativeMoveDirection += 360;
            }
            
            // Collision Detection
            var DidCollide;
            DidCollide = false;
            
            // Do the actual movement
            switch(RelativeMoveDirection)
            {
                case Direction.Left:
                {
                    if position_meeting(x - MaxStepDistance, y, Obj_Overworld_WallTile) DidCollide = true;
                    break;
                }
                case Direction.Right:
                {
                    if position_meeting(x + MaxStepDistance, y, Obj_Overworld_WallTile) DidCollide = true;
                    break;
                }
                case Direction.Up:
                {
                    if position_meeting(x, y - MaxStepDistance, Obj_Overworld_WallTile) DidCollide = true;
                    break;
                }
                case Direction.Down:
                {
                    if position_meeting(x, y + MaxStepDistance, Obj_Overworld_WallTile) DidCollide = true;
                    break;
                }
            }
            
            // Movement Stuff
            if(!DidCollide){
                bOkayToMove = false;
                bRotationalStep = false;
            }
        }else if(Obj_InputManager.InputHorizontalAxis != 0)
        {
            // Turning Stuff
            RotationDirection = Obj_InputManager.InputHorizontalAxis;
            bOkayToMove = false;
            bRotationalStep = true;
        }
    }else{    
        if(bRotationalStep){
            // Truncate our RotationSpeed to ensure we don't Overturn (Should never be needed but it's a good safety net)
            var TruncatedRotationSpeed;
            TruncatedRotationSpeed = RotationSpeed;
            if(DistanceRotatedThisStep + TruncatedRotationSpeed &gt; MaxRotationStep)
            {
                TruncatedRotationSpeed = MaxRotationStep - DistanceRotatedThisStep;
            }
            
            // Update our rotation
            FaceDirection += sign(RotationDirection) * TruncatedRotationSpeed;
            DistanceRotatedThisStep += RotationSpeed;
            
            // And perform ending checks
            if(DistanceRotatedThisStep &gt;= MaxRotationStep)
            {
                bOkayToMove = true;
                DistanceRotatedThisStep = 0;
                
                if(FaceDirection == Direction.LeftReset)
                {
                    FaceDirection = Direction.Left;
                }else if(FaceDirection == Direction.DownReset)
                {
                    FaceDirection = Direction.Down;
                }
            }
        }else{
            // Truncate our MoveSpeed to ensure we don't overstep (Should never be needed but it's a good safety net)
            var TruncatedMoveSpeed;
            TruncatedMoveSpeed = MoveSpeed;
            if(DistanceTraveledThisStep + TruncatedMoveSpeed &gt; MaxStepDistance)
            {
                TruncatedMoveSpeed = MaxStepDistance - DistanceTraveledThisStep;
            }
            
            // Do the actual movement
            switch(RelativeMoveDirection)
            {
                case Direction.Left:
                {
                    x -= TruncatedMoveSpeed;
                    break;
                }
                case Direction.Right:
                {
                    x += TruncatedMoveSpeed;
                    break;
                }
                case Direction.Up:
                {
                    y -= TruncatedMoveSpeed;
                    break;
                }
                case Direction.Down:
                {
                    y += TruncatedMoveSpeed;
                    break;
                }
            }
            
            // Ending Checks
            DistanceTraveledThisStep += TruncatedMoveSpeed;
            if(DistanceTraveledThisStep &gt;= MaxStepDistance)
            {
                bOkayToMove = true;
                DistanceTraveledThisStep = 0;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(Spr_Debug_PlayerOverworld, 0, x + 8, y + 8, 1, 1, FaceDirection, c_white, 1.0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
