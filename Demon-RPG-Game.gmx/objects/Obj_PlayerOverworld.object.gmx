<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Spr_Debug_PlayerOverworld</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum Direction {
    nullDir = -1,
    Left = 0,
    Up = 90,
    Right = 180,
    Down = 270,
    LeftReset = 360
};

FaceDirection = Direction.Left;
MoveDirection = Direction.nullDir;

MaxStepDistance = 16;
DistanceTraveledThisStep = 0;
MoveSpeed = 1;
bOkayToMove = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
enum Direction {
    nullDir = -1,
    Left = 0,
    Up = 90,
    Right = 180,
    Down = 270,
    LeftReset = 360
};

FaceDirection = Direction.Left;
MoveDirection = Direction.nullDir;

MaxStepDistance = 16;
DistanceTraveledThisStep = 0;
MoveSpeed = 1;
bOkayToMove = true;



InputHorizontalAxis = 0;
InputHorizontalAxisDown = 0;
InputHorizontalAxisRelease = 0;

InputVerticalAxis = 0;
InputVerticalAxisDown = 0;
InputVerticalAxisRelease = 0;
*/

// Movement //
if(bOkayToMove)
{
    // Check key presses and set a new target
}else{    
    // Truncate our MoveSpeed to ensure we don't overstep (Should never be needed but it's a good safety net)
    var TruncatedMoveSpeed;
    TruncatedMoveSpeed = MoveSpeed;
    if(DistanceTraveledThisStep + TruncatedMoveSpeed &lt; MaxStepDistance)
    {
        TruncatedMoveSpeed = MaxStepDistance - DistanceTraveledThisStep
    }
    
    // Update our position based on our direction.
    switch(MoveDirection)
    {
        case Direction.Left
            x -= MoveSpeed;
            DistanceTraveledThisStep += 
            break;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
