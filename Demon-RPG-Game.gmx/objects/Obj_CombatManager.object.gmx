<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum CombatState {
    EntryState,
    DecisionState,
    ActionState,
    ResolveState,
    EndState
};

enum AnimState {
    InitState,
    IntroInState,
    IntroOutState,
    MidCombat,
    EndInState,
    EndOutState
};

State = CombatState.EntryState;
AnimFrame = 0; // Used to count down animations, such as the entry state and attack animations.
AnimationState = AnimState.InitState;
bDrawCombatScene = false; // Should the combat scene be drawn

// Transition Stuff
TransitionInFrameCount = 120;
TransitionOutFrameCount = 90;
BloomInstance = noone;
TransitionBloomAlpha = 0.9;
TransitionBloomDistance = 2.3;

MaxNumEnemies = 6;
CurrentTurnIndex = -1; // -1 Used for the player, every other index from there is the instance number of all Obj_EnemyData.

// Attack Stuff
AttackTarget = 0; // -2 for All Enemies, -1 for Player, 0+ for individual enemies
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Main switch state
switch(State)
{
    case CombatState.EntryState:
    {
        // Controls Combat Entry animation        
        if(AnimationState == AnimState.InitState)
        {
            AnimationState = AnimState.IntroInState;
            BloomInstance = instance_create( 0, 0, Obj_EffectBloom);
            with(BloomInstance)
            {
                BloomSamples = 8;
                BloomMinDistance = 1.02;
                BloomMaxDistance = 1.02;
                BloomMinAlpha = 0.2;
                BloomMaxAlpha = 0.2;
            }
        }
        else if(AnimationState == AnimState.IntroInState)
        {
            AnimFrame += 1.0;
            
            BloomInstance.BloomMaxAlpha = lerp( 0.2, TransitionBloomAlpha, AnimFrame/TransitionInFrameCount);
            BloomInstance.BloomMaxDistance = lerp( 1.01, TransitionBloomDistance, AnimFrame/TransitionInFrameCount);
            
            if(AnimFrame &gt; TransitionInFrameCount)
            {
                AnimFrame = 0;
                AnimationState = AnimState.IntroOutState;
                with(BloomInstance)
                {
                    instance_destroy();
                }
                BloomInstance = instance_create( 0, 0, Obj_EffectFadeTransition);
                BloomInstance.FadeTimerMax = TransitionOutFrameCount;
                Scr_Combat_FocusCamera(-2, TransitionInFrameCount);
                bDrawCombatScene = true;
            }
        }
        else if(AnimationState == AnimState.IntroOutState)
        {
            AnimFrame += 1;
            if(AnimFrame &gt; TransitionOutFrameCount)
            {
                AnimFrame = 0;
                //CurrentTurnIndex = Scr_Combat_DetermineFirstStrike();
                State = CombatState.DecisionState;
            }
        }
        break;
    }
    case CombatState.DecisionState:
    {
        // If it's the player's turn, let them do their actions. Otherwise decide for enemies here
        if(CurrentTurnIndex != -1)
        {
            Scr_Combat_FocusCamera(CurrentTurnIndex, 10);
            //Enemy Turn Do Stuff Here
            AnimFrame = 60;
            State = CombatState.ActionState;
        }else{
            if(!instance_exists(Obj_CombatUI))
            {
                Scr_Combat_FocusCamera(-1, 10);
                instance_create(0,0,Obj_CombatUI);
                // TODO: Actually be able to enter the Action State from the UI
            }
        }
        break;
    }
    case CombatState.ActionState:
    {
        // Simply a wait state so that animations can be played.
        AnimFrame -= 1;
        if(AnimFrame &lt;= 0)
        {
            CurrentTurnIndex += 1;
            if(CurrentTurnIndex &gt; instance_number(Obj_EnemyData) - 1)
                CurrentTurnIndex = -1;
            State = CombatState.DecisionState;
        }
        break;
    }
    case CombatState.ResolveState:
    {
        // Apply effects of actions including damage and buffs, then determine if anyone has died and react accordingly.
        break;
    }
    case CombatState.EndState:
    {
        // Resolve the overall combat, either by displaying results or returning the player to the main menu via an animation.
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
