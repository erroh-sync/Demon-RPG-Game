<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum CombatState {
    EntryState,
    DecisionState,
    ActionState,
    ResolveState,
    PlayerDied,
    EndState
};

enum AnimState {
    InitState,
    IntroInState,
    IntroOutState,
    MidCombat,
    EndInState,
    EndOutState
};

State = CombatState.EntryState;

MaxAnimFrame = 150;
AnimFrame = 0; // Used to count down animations, such as the entry state and attack animations.
SkillAnimDelay = 60;
SkillAnimDelayTimer = SkillAnimDelay;

AnimationState = AnimState.InitState;
bDrawCombatScene = false; // Should the combat scene be drawn

// Transition Stuff
TransitionInFrameCount = 250;
TransitionOutFrameCount = 50;
BloomInstance = noone;
TransitionBloomAlpha = 0.5;
TransitionBloomDistance = 2.3;

MaxNumEnemies = 6;
CurrentTurnIndex = -1; // -1 Used for the player, every other index from there is the instance number of all Obj_EnemyData.

// Attack Stuff
AttackTarget = 0; // -2 for All Enemies, -1 for Player, 0+ for individual enemies

// Death Stuff 
FadeInstance = noone;
DeathFadeOutTimer = 120;
DeathTimeBeforeReset = 200;

// Loot
XPGainedDuringBattle = 0;
GoldGainedDuringBattle = 0;

// Audio
__stop_song(true);
__play_sfx(Snd_Combat_BattleIntro, 0.8);
BattleTheme = mus_battle_random;

//Misc
bCanFlee = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(Obj_EnemyData){instance_destroy();}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Main switch state
switch(State)
{
    case CombatState.EntryState:
    {
        // Controls Combat Entry animation        
        if(AnimationState == AnimState.InitState)
        {
            AnimationState = AnimState.IntroInState;
            BloomInstance = instance_create( 0, 0, Obj_RandomEncounterTransition);
            with(BloomInstance)
            {
                BloomSamples = 8;
                BloomMinDistance = 1.02;
                BloomMaxDistance = 1.02;
                BloomMinAlpha = 0.2;
                BloomMaxAlpha = 0.2;
                BloomXOffset = 0;
                BloomYOffset = 0;
            }
        }
        else if(AnimationState == AnimState.IntroInState)
        {
            AnimFrame += 1.0;
            
            BloomInstance.BloomMaxAlpha = lerp( 0.2, TransitionBloomAlpha, AnimFrame/TransitionInFrameCount);
            BloomInstance.BloomMaxDistance = lerp( 1.01, TransitionBloomDistance, AnimFrame/TransitionInFrameCount);
            BloomInstance.BloomXOffset = lerp( 0, 96, AnimFrame/TransitionInFrameCount);
            BloomInstance.BloomYOffset = lerp( 0, 96, AnimFrame/TransitionInFrameCount);
            
            if(AnimFrame &gt; TransitionInFrameCount)
            {
                AnimFrame = 0;
                AnimationState = AnimState.IntroOutState;
                with(BloomInstance)
                {
                    instance_destroy();
                }
                BloomInstance = instance_create( 0, 0, Obj_EffectFadeTransition);
                BloomInstance.FadeTimerMax = TransitionOutFrameCount;
                Scr_Combat_FocusCamera(-2, TransitionInFrameCount);
                bDrawCombatScene = true;
                __set_playing_song(BattleTheme, false);
            }
        }
        else if(AnimationState == AnimState.IntroOutState)
        {
            AnimFrame += 1;
            if(AnimFrame &gt; TransitionOutFrameCount)
            {
                AnimFrame = 0;
                //CurrentTurnIndex = Scr_Combat_DetermineFirstStrike();
                instance_create(0,0, Obj_PlayerStatsHUD);
                
                State = CombatState.DecisionState;
            }
        }
        break;
    }
    case CombatState.DecisionState:
    {
        // If it's the player's turn, let them do their actions. Otherwise decide for enemies here
        if(CurrentTurnIndex &gt;= 0)
        {
            Scr_Combat_FocusCamera(CurrentTurnIndex, 10);
            //Enemy Turn Do Stuff Here
            AnimFrame = MaxAnimFrame;
            SkillAnimDelayTimer = SkillAnimDelay;
            with(instance_find(Obj_EnemyData, Obj_CombatManager.CurrentTurnIndex)){bProtecting = false;}
            State = CombatState.ActionState;
            
            //var MoveToUse = 0;
            //show_debug_message("Enemy " + string(CurrentTurnIndex) + " Attacks PLAYER with attack " + string(MoveToUse));
            
        }else{
            if(!instance_exists(Obj_CombatUI))
            {
                Obj_PlayerData.bProtecting = false;
                Scr_Combat_FocusCamera(-1, 10);
                instance_create(0,0,Obj_CombatUI);
                AnimFrame = 30;
                SkillAnimDelayTimer = -500
                // TODO: Actually be able to enter the Action State from the UI
            }
        }
        break;
    }
    case CombatState.ActionState:
    {
        Obj_CombatRenderer.TType = TargetType.None;
        SkillAnimDelayTimer -= 1;
        if(SkillAnimDelayTimer &lt;= 0 &amp;&amp; SkillAnimDelayTimer &gt; -499)
        {
            /*
                Run Enemy Attack Code
            */
            with(Obj_AttackUsageData)
            {
                var Usr = instance_find(Obj_EnemyData, Obj_CombatManager.CurrentTurnIndex);
                var SkillID = irandom(Usr.LastSkillIndex);
                var Targ = -1;
                if(Usr.ChargeTurnsRemaining &gt; 0)
                {
                    SkillID = Usr.LastAttackIndex;
                    Targ = Usr.StoredTarget
                    Index = SkillID;
                }
                else
                {
                    switch(Obj_SkillItemData.SkillData[Usr.SkillArray[SkillID], 3])
                    {
                        case WhoToTarget.wtt_Enemy:
                            // Already set to player so we can break
                            break;
                        case WhoToTarget.wtt_AllEnemy:
                            // Pretty much impossible since the enemies only have one enemy, being you.
                            // Might make multi-target skills deal multiple hits to the player tho
                            // Can still autobreak tho lmao
                            break;
                        case WhoToTarget.wtt_Ally:
                            Targ = irandom(instance_number(Obj_EnemyData) - 1);
                            break;
                        case WhoToTarget.wtt_AllAlly:
                            Targ = irandom(instance_number(Obj_EnemyData) - 1);
                            break;
                        case WhoToTarget.wtt_SelfNone:
                            Targ = Obj_CombatManager.CurrentTurnIndex;
                            break;
                    }
                    Index = Usr.SkillArray[SkillID];
                }
                Target = Targ;
                User = Obj_CombatManager.CurrentTurnIndex;
                Power = 1;
                event_user(1); // perform skill
            }
            
            SkillAnimDelayTimer = -500;
        }
    
        // Simply a wait state so that animations can be played.
        if(!instance_exists(Obj_AttackEffect_Master))
        {
            AnimFrame -= 1;
            if(AnimFrame &lt;= 0)
            {
                if(Obj_PlayerData.Hitpoints &gt; 0)
                {
                    CurrentTurnIndex += 1;
                    if(CurrentTurnIndex &gt; instance_number(Obj_EnemyData) - 1)
                        CurrentTurnIndex = -1;
                    State = CombatState.DecisionState;
                }
                else
                {
                    State = CombatState.PlayerDied;
                }
            }
        }
        break;
    }
    case CombatState.ResolveState:
    {
        // Apply effects of actions including damage and buffs, then determine if anyone has died and react accordingly.
        break;
    }
    case CombatState.PlayerDied:
    {
        // Called when the player fucking dies like I want to lol
        if(FadeInstance == noone)
        {
            FadeInstance = instance_create( 0, 0, Obj_FadeToBlack);
            with(FadeInstance)
            {
                FadeTimerMax = Obj_CombatManager.DeathFadeOutTimer;
            }
        }
            
        DeathTimeBeforeReset -= 1;
        if(DeathTimeBeforeReset &lt;= 0)
            game_restart();
        break;
    }
    case CombatState.EndState:
    {
        // Resolve the overall combat, either by displaying results or returning the player to the main menu via an animation.
        instance_create(0,0,Obj_EffectFadeTransition);
        with(Obj_CombatUI){instance_destroy();}
        instance_destroy();       
        __set_playing_song(Obj_MusicManager.snd_primarysong, false);
        
        // FOR DEMO ONLY!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
        Obj_PlayerData.Hitpoints = Obj_PlayerData.MaxHitpoints;
        Obj_PlayerData.Manapoints = Obj_PlayerData.MaxManapoints;
        
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
