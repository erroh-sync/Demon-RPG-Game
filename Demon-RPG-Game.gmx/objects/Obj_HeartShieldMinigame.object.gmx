<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Obj_CombatMinigameMaster</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// SHIELD PIECES
LeftPosition = 640 - 64;
LeftVelocity = 0;
RightPosition = 64;
RightVelocity = 0;

// PHYSICS
ImpulseValue = 8;
TerminalVelocity = 20;
DragValue = 0.3;

// FINISH ANIM
bIsDone = false;
FinishTimerMax = 60;
FinishTimer = FinishTimerMax - 10;

TargetMax = 48;
LerpSpeed = 0.3;

WhiteAlpha = 0;
bShowShield = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if(!bIsDone){
    // ADDING VELOCITY
    if(Obj_InputManager.InputHorizontalAxisDown &gt; 0)
        LeftVelocity = clamp(LeftVelocity + ImpulseValue, 0, TerminalVelocity);
    else if(Obj_InputManager.InputHorizontalAxisDown &lt; 0)
        RightVelocity = clamp(RightVelocity + ImpulseValue, 0, TerminalVelocity);
        
    // UPDATING POSITIONS
    LeftPosition -= LeftVelocity;
    RightPosition += RightVelocity;
    
    // DRAG
    LeftVelocity = clamp(LeftVelocity - DragValue, 0, TerminalVelocity);
    RightVelocity = clamp(RightVelocity - DragValue, 0, TerminalVelocity);
    
    // CHECK DONE
    if(LeftPosition &lt; RightPosition)
        bIsDone = true;
}else{
    if(FinishTimer &gt; 0)
    {
        FinishTimer -= 1;
        CurrentTime = 100000;
        
        var TargPos = Scr_SCurve(sin(lerp(0, pi, FinishTimer/FinishTimerMax))) * TargetMax;
        LeftPosition = lerp(LeftPosition, 320 - TargPos, LerpSpeed);
        RightPosition = lerp(RightPosition, 320 + TargPos, LerpSpeed);
    }
    else if(CurrentTime &gt; 90)
    {
        LeftPosition = 320;
        RightPosition = 320;
        CurrentTime = 90;
        WhiteAlpha = 2.5;
        bShowShield = true;
        
        // Show Popup Text
        TextType = MinigamePopupText.empt_Great;
        TextOriginX = 320;
        TextOriginY = 180;
        TextDirX = 0;
        TextDirY = 0;
        TextTimer = TextTimerMax;
    }
}

WhiteAlpha -= 0.08;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(bEnableDraw){ 
    event_inherited();
    
    // SHIELD ENERGY
    if(bShowShield)
        draw_sprite_ext(GUI_Combat_Minigames_HeartShield_Fill, 0, 320, 180, 1.0, 1.0, 0.0, c_white, FadeAlpha);
    
    // SHIELD PIECES
    draw_sprite_ext(GUI_Combat_Minigames_HeartShield_LeftPiece, 0, LeftPosition, 180, 1.0, 1.0, 0.0, c_white, FadeAlpha);// LEFT
    draw_sprite_ext(GUI_Combat_Minigames_HeartShield_RightPiece, 0, RightPosition, 180, 1.0, 1.0, 0.0, c_white, FadeAlpha);// RIGHT
    
    // WHITE OUT
    draw_set_alpha(WhiteAlpha);
    draw_rectangle(0,0,640,360,false);
    draw_set_alpha(1.0);    
    
    Scr_DrawMinigamePopupText();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
