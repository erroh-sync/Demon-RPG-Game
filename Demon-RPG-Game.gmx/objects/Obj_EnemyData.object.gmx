<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Obj_CharacterData</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Dialouge Data //
NameStr = "ENEMY";

StartDialougeString[0] = "Hello! You wish to speak with me?"

QuestionIndex[0, 0] = "Is the sky Blue?"; // Question name
QuestionIndex[0, 1] = "Yes"; // Best Answer
QuestionIndex[0, 2] = "Yes! The sky IS blue!"; // Best Response
QuestionIndex[0, 3] = "Sometimes"; // Neutral Answer
QuestionIndex[0, 4] = "Huh, I guess at dusk it is orange."; // Neutral Response
QuestionIndex[0, 5] = "No"; // Incorrect Answer
QuestionIndex[0, 6] = "Hah, Maybe in Morioh lmao"; // Incorrect Response

DialougeFailedString = "Hmph, What a waste of time!"
DialougeSuccededString = "Yes! Take this skill!"

RejectCommunication = false;

TutorSkillIndex = 0;

LastSkillIndex = 0;

// Display Data
DrawSize = 24;
DrawResolution = 128;
TextureSurface = surface_create(DrawResolution,DrawResolution);
DrawSprite = Spr_Debug_TestEnemy;
bEnableDraw = false;
AimOffset = 12;

AnimPlaySpeed = 1.0;

bHighlighted = false;

TakeDamage = false;

// Damaged Flicker
FlickerMaxTimer = 25;
FlickerTimer = 0;

// Death Animation
DeathAnimMaxTimer = 30;
DeathAnimTimer = DeathAnimMaxTimer;

DodgeAnim = 0;
DodgeAnimSpeed = 0.15;

XPReward = 15;
GoldReward = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(TextureSurface);

if(Obj_CombatManager){
    Obj_CombatManager.XPGainedDuringBattle += XPReward;
    Obj_CombatManager.GoldGainedDuringBattle += GoldReward;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if((bHighlighted &amp;&amp; Obj_CombatRenderer.TType != TargetType.None) || HealthFlashTimer &gt; 0.0){
    HealthbarAnim += HealthbarAnimSpeed;
    if(HealthbarAnim &gt; 1.0)
        HealthbarAnim = 1.0;
}
else{
    HealthbarAnim -= HealthbarAnimSpeed;
    if(HealthbarAnim &lt; 0.0)
        HealthbarAnim = 0.0;
}

if(TakeDamage)
{
    FlickerTimer = FlickerMaxTimer;
    TakeDamage = false;
    show_debug_message("DAMAGE DEALT");
}

if(FlickerTimer &gt; 0)
    FlickerTimer -= 1;
    
if(DeathAnimTimer &gt; 0 &amp;&amp; Hitpoints &lt;= 0)
{
    DeathAnimTimer -= 1;
    if(DeathAnimTimer &lt;= 0)
        instance_destroy();   
}

AnimPlaySpeed = 1 + (SPDBoostLevel * 0.25);

if(DodgeAnim &gt; 0)
    DodgeAnim -= DodgeAnimSpeed;
else
    DodgeAnim = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// event_inherited(); is called after sprite drawing so the healthbar will be drawn on top.

if(bEnableDraw)
{
    // Draw to Surface
    if(surface_exists(TextureSurface))
    {
        surface_set_target(TextureSurface);

        d3d_set_projection_ortho(0,0,DrawResolution,DrawResolution,0);
        
        draw_set_alpha(1);
        draw_set_color(c_white);
        
        // Draw the Healthbar
        var hpOff = lerp(0,8,Scr_SCurve(HealthbarAnim));
        draw_sprite_ext(GUI_Combat_Misc_EnemyHealthBacking, -1, DrawResolution/2 - 36, DrawResolution/4 - hpOff, 1.0, 1.0, 0.0, c_white, HealthbarAnim);
        draw_sprite_ext(GUI_Combat_Misc_EnemyHealthFillFlash, -1, DrawResolution/2 - 32, DrawResolution/4 - hpOff - 4, lerp(clamp(Hitpoints/MaxHitpoints, 0.0, 1.0), clamp(HealthFlashAmount/MaxHitpoints, 0.0, 1.0), Scr_SCurve(clamp(HealthFlashTimer, 0.0, 1.0))), 1.0, 0.0, c_white, HealthbarAnim);
        draw_sprite_ext(GUI_Combat_Misc_EnemyHealthFill, -1, DrawResolution/2 - 32, DrawResolution/4 - hpOff - 4, clamp(Hitpoints/MaxHitpoints, 0.0, 1.0), 1.0, 0.0, c_white, HealthbarAnim);
        
        surface_reset_target();
        Scr_Reset3dView();
    }else{
        TextureSurface = surface_create(DrawResolution,DrawResolution);
    }
    
    // Render in World
    var DodgeOffset = sin(DodgeAnim) * 32;
    d3d_draw_wall(x, y - DrawSize - DodgeOffset, DrawSize * 2, x, y + DrawSize - DodgeOffset, 0, surface_get_texture(TextureSurface), 1, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
