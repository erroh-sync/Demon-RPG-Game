<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Obj_CharacterData</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Player Data //

// Display Data
DrawSize = 32;
DrawResolution = 128;
TextureSurface = surface_create(DrawResolution,DrawResolution);
DrawSprite = Spr_Debug_TestEnemy;
bEnableDraw = false;

HealthbarAnim = 0;
HealthbarAnimSpeed = 0.1;
bHighlighted = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_free(TextureSurface);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(bHighlighted || HealthFlashTimer &gt; 0.0){
    HealthbarAnim += HealthbarAnimSpeed;
    if(HealthbarAnim &gt; 1.0)
        HealthbarAnim = 1.0;
}
else{
    HealthbarAnim -= HealthbarAnimSpeed;
    if(HealthbarAnim &lt; 0.0)
        HealthbarAnim = 0.0;
}

if(HealthFlashTimer &gt;= 0.0){
    HealthFlashTimer -= HealthbarAnimSpeed;
    if(HealthbarAnim &lt;= 0.0){
        HealthFlashTimer = 0.0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(bEnableDraw)
{
    // Draw to Surface
    if(surface_exists(TextureSurface))
    {
        surface_set_target(TextureSurface);

        draw_clear_alpha(c_black, 0.0);
        d3d_set_projection_ortho(0,0,DrawResolution,DrawResolution,0);
        
        draw_set_alpha(1);
        draw_set_color(c_white);
        
        // Draw the Sprite
        draw_sprite_ext(DrawSprite, -1, DrawResolution/2, DrawResolution, 1.0, 1.0, 0.0, c_white, 1.0);
        
        // Draw the Healthbar
        var hpOff = lerp(0,8,Scr_SCurve(HealthbarAnim));
        draw_sprite_ext(GUI_Combat_Misc_EnemyHealthBacking, -1, DrawResolution/2 - 36, DrawResolution - sprite_get_height(DrawSprite) - hpOff, 1.0, 1.0, 0.0, c_white, HealthbarAnim);
        draw_sprite_ext(GUI_Combat_Misc_EnemyHealthFillFlash, -1, DrawResolution/2 - 32, DrawResolution - sprite_get_height(DrawSprite) - hpOff - 4, lerp(clamp(Hitpoints/MaxHitpoints, 0.0, 1.0), clamp(HealthFlashAmount/MaxHitpoints, 0.0, 1.0), Scr_SCurve(clamp(HealthFlashTimer, 0.0, 1.0))), 1.0, 0.0, c_white, HealthbarAnim);
        draw_sprite_ext(GUI_Combat_Misc_EnemyHealthFill, -1, DrawResolution/2 - 32, DrawResolution - sprite_get_height(DrawSprite) - hpOff - 4, clamp(Hitpoints/MaxHitpoints, 0.0, 1.0), 1.0, 0.0, c_white, HealthbarAnim);
                
        surface_reset_target();
        Scr_Reset3dView();
    }else{
        TextureSurface = surface_create(DrawScale,DrawScale);
    }
    
    // Render in World
    // TODO: Should billboard towards player 
    d3d_draw_wall(x, y - DrawSize, DrawSize * 2, x, y + DrawSize, 0, surface_get_texture(TextureSurface), 1, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
