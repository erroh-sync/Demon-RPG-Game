<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Obj_UIMenuMaster</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum MainMenuChosenOption{
    emmco_None,
    emmco_NewGame,
    emmco_LoadGame,
    emmco_Quit
}

enum MainMenuFadeState{
    emmfs_None,
    emmfs_In,
    emmfs_Out
}

event_inherited();

ChosenOption = MainMenuChosenOption.emmco_None;
FadeState = MainMenuFadeState.emmfs_In;
BlackoutAlpha = 1.0;

WaveAnim = 0;
 
xMax = 0;
yMax = 3;

for(var i = 0; i &lt; yMax + 1; i += 1){FogAlpha[i] = 0;}
FogAnimSpeed = 0.1;

bInOptionsMenu = false;

__set_playing_song(mus_frontend, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

/*********************************************
// Update Animations
*********************************************/
WaveAnim += 0.01;

for(var i = 0; i &lt; yMax + 1; i += 1){
    if(i == yPosition)
        FogAlpha[i] = clamp(FogAlpha[i] + FogAnimSpeed, 0, 1.3);
    else
        FogAlpha[i] = clamp(FogAlpha[i] - FogAnimSpeed, 0, 1.3);
}
//////////////////////////////////////////////

/*********************************************
// Set Properties
*********************************************/
xMax = 0;
yMax = 3;
b_horizontalsounds = false;
b_verticalsounds = true;
if(bInOptionsMenu){
    if(yPosition != 1 &amp;&amp; yPosition != 2)
        b_selectsounds = true
    else
        b_selectsounds = false;
}else
if(bInOptionsMenu){
    if(yPosition != 1 &amp;&amp; yPosition != 2)
        b_backsounds = true
    else
        b_backsounds = false;
}else
    b_backsounds = true; 
//////////////////////////////////////////////

// Option Selecting
if(Obj_InputManager.InputSelectAxisDown &gt; 0){
    if(!bInOptionsMenu){
        switch(yPosition)
        {
            case 0:
                // BEGIN NEW GAME
                ChosenOption = MainMenuChosenOption.emmco_NewGame;
                FadeState = MainMenuFadeState.emmfs_Out;
                break;
            case 1:
                // LOAD GAME HERE
                ChosenOption = MainMenuChosenOption.emmco_LoadGame;
                FadeState = MainMenuFadeState.emmfs_Out;
                break;
            case 2:
                // GOTO OPTIONS MENU
                bInOptionsMenu = true;
                yPosition = 0;
                FogAlpha[0] = 0.5;
                FogAlpha[2] = 0;
                break;
            case 3:
                // QUIT
                ChosenOption = MainMenuChosenOption.emmco_Quit;
                FadeState = MainMenuFadeState.emmfs_Out;
                break;
        }
    }else{
        switch(yPosition)
        {
            case 0:
                // TOGGLE FULLSCREEN
                window_set_fullscreen(!window_get_fullscreen());
                break;
            case 1:
                // SFX SLIDER
                Obj_GameManager.MUSVolume = clamp(Obj_GameManager.MUSVolume + 1, 0, 10);
                __set_song_volume(1.0);
                __play_sfx(HoverSound, 1.0);
                break;
            case 2:
                // MUSIC SLIDER
                Obj_GameManager.SFXVolume = clamp(Obj_GameManager.SFXVolume + 1, 0, 10);
                __play_sfx(HoverSound, 1.0);
                break;
            case 3:
                // BACK TO MAIN MENU
                __save_file();
                bInOptionsMenu = false;
                yPosition = 2;
                FogAlpha[2] = 0.5;
                FogAlpha[3] = 0;
                break;
        }
    }
}else if(Obj_InputManager.InputSelectAxisDown &lt; 0){
    if(bInOptionsMenu){
        switch(yPosition)
        {
            case 0:
                // TOGGLE FULLSCREEN
                bInOptionsMenu = false;
                yPosition = 2;
                FogAlpha[2] = 0.5;
                FogAlpha[3] = 0;
                break;
            case 1:
                // SFX SLIDER
                Obj_GameManager.MUSVolume = clamp(Obj_GameManager.MUSVolume - 1, 0, 10);
                __set_song_volume(1.0);
                __play_sfx(HoverSound, 1.0);
                break;
            case 2:
                // MUSIC SLIDER
                Obj_GameManager.SFXVolume = clamp(Obj_GameManager.SFXVolume - 1, 0, 10);
                __play_sfx(HoverSound, 1.0);
                break;
            case 3:
                // BACK TO MAIN MENU
                __save_file();
                bInOptionsMenu = false;
                yPosition = 2;
                FogAlpha[2] = 0.5;
                FogAlpha[3] = 0;
                break;
        }
    }
}else if(Obj_InputManager.InputHorizontalAxisDown != 0){
    if(bInOptionsMenu){
        switch(yPosition)
        {
            case 1:
                // SFX SLIDER
                Obj_GameManager.MUSVolume = clamp(Obj_GameManager.MUSVolume - Obj_InputManager.InputHorizontalAxisDown, 0, 10);
                __set_song_volume(1.0);
                __play_sfx(HoverSound, 1.0);
                break;
            case 2:
                // MUSIC SLIDER
                Obj_GameManager.SFXVolume = clamp(Obj_GameManager.SFXVolume - Obj_InputManager.InputHorizontalAxisDown, 0, 10);
                __play_sfx(HoverSound, 1.0);
                break;
        }
    }
}

switch(FadeState){
    case MainMenuFadeState.emmfs_None:
        break;
     case MainMenuFadeState.emmfs_In:
        BlackoutAlpha -= FogAnimSpeed/4;
        if(BlackoutAlpha &lt;= 0){
            BlackoutAlpha = 0;
            FadeState = MainMenuFadeState.emmfs_None;
        }
        break;
     case MainMenuFadeState.emmfs_Out:
        BlackoutAlpha += FogAnimSpeed/4;
        if(BlackoutAlpha &gt;= 1){
            BlackoutAlpha = 1;
            
            instance_create(0,0, Obj_FadeToBlack);
            with(Obj_FadeToBlack){
                ReverseFade = true;
                persistent = true;
            }
            
            switch(ChosenOption){
                case MainMenuChosenOption.emmco_None:
                    break;
                case MainMenuChosenOption.emmco_NewGame:
                    //room_goto(Rm_Prison_Entry); // TODO: Change this map
                    room_goto_next();
                    break;
                case MainMenuChosenOption.emmco_LoadGame:
                    game_restart();
                    // TODO:
                    show_debug_message("I SHOULD PROBABLY CODE THAT");
                    break;
                case MainMenuChosenOption.emmco_Quit:
                    game_end();
                    break;
            }
        }
        break;   
}

if(!bInOptionsMenu &amp;&amp; yPosition = 3)
    __set_song_volume(0.5);
else
    __set_song_volume(1.0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(bEnableDraw){ 
    var GlobalSinWave = sin(WaveAnim);
        
    // CURSOR FOG    
    // hAnim
    var hOffset = WaveAnim * 20;
    while(hOffset &gt; 42)
        hOffset -= 42;
        
    var numBtns = yMax;
    if(bInOptionsMenu)
        numBtns += 1;
    for(var i = 0; i &lt; numBtns; i += 1){
        // Left Fog   
        var fogSin = sin(WaveAnim);
        for(var j = 0; j &lt; 18; j += 1)
            draw_sprite_ext(GUI_FrontEnd_CursorFogPart, 0, -42 + hOffset + (j * 42), 218 + (38 * i), 1.0, 0.8 + fogSin/4, 0, c_white, FogAlpha[i]); // Part 1
        
        // Right Fog
        var fogCos = cos(WaveAnim + 0.3);
        for(var j = 0; j &lt; 18; j += 1)
            draw_sprite_ext(GUI_FrontEnd_CursorFogPart, 0, - hOffset + (j * 42), 218 + (38 * i), 1.0, 1.2 + fogCos/4, 0, c_white, FogAlpha[i]); // Part 2
    }
    
    // BUTTONS
    if(!bInOptionsMenu){    
        // Main Menu
        draw_sprite_ext(GUI_FrontEnd_NewGameBtn, 0, 320, 218, 1.0, 1.0, 0, c_white, 1.0); // New Game
        draw_sprite_ext(GUI_FrontEnd_LoadFileBtn, 0, 320, 256, 1.0, 1.0, 0, c_dkgray, 1.0); // Load File
        draw_sprite_ext(GUI_FrontEnd_OptionsBtn, 0, 320, 294, 1.0, 1.0, 0, c_white, 1.0); // Options
    }
    else
    {
        // Options
        draw_sprite_ext(GUI_FrontEnd_OptFullScreenBtn, 0, 4, 218, 1.0, 1.0, 0, c_white, 1.0); // Full Screen
            draw_sprite_ext(GUI_FrontEnd_OptionsPip, window_get_fullscreen(), 232, 218, 1.0, 1.0, 0, c_white, 1.0); // Full Screen Indicator
            
        draw_sprite_ext(GUI_FrontEnd_OptMusicVolumeBtn, 0, 4, 256, 1.0, 1.0, 0, c_white, 1.0); // Music Vol
            for(var i = 1; i &lt; 11; i += 1)
            {
                var blipFrame = 0;
                if(i &lt;= Obj_GameManager.MUSVolume)
                    blipFrame = 1;
                draw_sprite_ext(GUI_FrontEnd_OptionsPip, blipFrame, 202 + (i * 30), 256, 1.0, 1.0, 0, c_white, 1.0); // Music Vol Indicator
            }
            
        draw_sprite_ext(GUI_FrontEnd_OptSFXVolumeBtn, 0, 4, 294, 1.0, 1.0, 0, c_white, 1.0); // SFX Vol
            for(var i = 1; i &lt; 11; i += 1)
            {
                var blipFrame = 0;
                if(i &lt;= Obj_GameManager.SFXVolume)
                    blipFrame = 1;
                draw_sprite_ext(GUI_FrontEnd_OptionsPip, blipFrame, 202 + (i * 30), 294, 1.0, 1.0, 0, c_white, 1.0); // SFX Vol Indicator
            }
            
        draw_sprite_ext(GUI_FrontEnd_OptBackBtn, 0, 4, 332, 1.0, 1.0, 0, c_white, 1.0); // Back
    }
    
    // LOGO
        // Crimson
        draw_sprite_ext(GUI_FrontEnd_Crimson, 0, 320, 84 + (GlobalSinWave * 8), 1.0, 1.0, 0, c_white, 1.0);
        
        // Witness
        draw_sprite_ext(GUI_FrontEnd_Witness, 0, 400, 139 + (GlobalSinWave * 16), 1.0, 1.0, 0, c_white, 1.0);
        
    // EXIT, FOG &amp;&amp; BLACKOUT
    if(!bInOptionsMenu){
        draw_sprite_ext(GUI_FrontEnd_Blackout, 0, 0, 0, 1.0, 1.0, 0, c_white, FogAlpha[3]);
        
        var fogSin = sin(WaveAnim * 3);
        var fogCos = cos(WaveAnim * 3);
        draw_sprite_ext(GUI_FrontEnd_ExitFog, 0, 60, 340, 0.8 + abs(fogCos/16), 0.4 + fogSin/16, 0, c_white, FogAlpha[3]); // Part 1
        draw_sprite_ext(GUI_FrontEnd_ExitFog, 0, 60, 340, 0.6 + abs(fogSin/16), 0.3 + fogCos/16, 0, c_white, FogAlpha[3]); // Part 1
        
        // Exit Button 
        draw_sprite_ext(GUI_FrontEnd_ExitBtn, 0, 4, 324, 1.0, 1.0, 0, c_white, 1.0);
    }
    
    // COPYRIGHT STATEMENT
    draw_sprite_ext(GUI_FrontEnd_Copyright, 0, 320, 348, 1.0, 1.0, 0, c_white, 1.0);
    
    // Blackout Overlay   
    draw_set_color(c_black);
    draw_set_alpha(BlackoutAlpha);
    draw_rectangle(0,0,640,360,false);
    draw_set_color(c_white);
    draw_set_alpha(1.0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
