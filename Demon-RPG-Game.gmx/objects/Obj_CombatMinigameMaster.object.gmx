<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Obj_UIMaster</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Timer
MaxTime = 180;
CurrentTime = MaxTime;

// Fade
FadeAlpha = 0;
FadeSpeed = 0.1;

// Popup Text
enum MinigamePopupText{
    empt_Miss,
    empt_Okay,
    empt_Good,
    empt_Great,
    empt_Perfect
};
TextType = MinigamePopupText.empt_Miss;
TextOriginX = 0;
TextOriginY = 0;
TextMovementAmount = 100;
TextTimerMax = 60;
TextTimer = 0;
TextDirX = 0;
TextDirY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(CurrentTime &gt; 0){
    CurrentTime -= 1;
    FadeAlpha = clamp(FadeAlpha + FadeSpeed,0,1);
}
else
{
    FadeAlpha -= FadeSpeed;
    if(FadeAlpha &lt;= 0 &amp;&amp; TextTimer &lt;= 0)
        instance_destroy();
}

// Popup Text
if(TextTimer &gt; 0)
    TextTimer -= 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Popup Text
if(TextTimer &gt; 0)
{
    var tX = lerp(TextOriginX, TextOriginX + (TextDirX * TextMovementAmount), 1 - TextTimer/TextTimerMax);
    var tY = lerp(TextOriginY, TextOriginY + (TextDirY * TextMovementAmount), 1 - TextTimer/TextTimerMax);
    var PopupSprite = GUI_Combat_Misc_MissPopup;
    
    switch(TextType)
    {
        case MinigamePopupText.empt_Okay: PopupSprite = GUI_Combat_Misc_OkayPopup;
            break;
        case MinigamePopupText.empt_Good: PopupSprite = GUI_Combat_Misc_GoodPopup;
            break;
        case MinigamePopupText.empt_Great: PopupSprite = GUI_Combat_Misc_GreatPopup;
            break;
        case MinigamePopupText.empt_Perfect: PopupSprite = GUI_Combat_Misc_PerfectPopup;
            break;
    }
    
    draw_sprite_ext(PopupSprite, 0, tX, tY, 1.0, 1.0, 0.0, c_white, 1.0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
