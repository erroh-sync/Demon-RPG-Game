<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>GUI_Combat_Minigames_FistCursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Obj_CombatMinigameMaster</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// FIST CURSORS
NumCursors = 3;
CursorMinSeparation = 0.15;
CursorMaxSeparation = 0.35;
CursorMoveSpeed = 0.01;
for(var i = 0; i &lt; NumCursors; i += 1)
{
    if(i &gt; 0)
        CursorArray[i, 0] = CursorArray[i-1, 0]-(random_range(CursorMinSeparation, CursorMaxSeparation))
    else
        CursorArray[i, 0] = -(random_range(CursorMinSeparation, CursorMaxSeparation))
    CursorArray[i, 1] = false; // Whether or not it's been pressed;
    CursorArray[i, 2] = 0.0;
    CursorArray[i, 3] = 2.0;
}

// THRESHOLDS
GreatThreshold = 0.05;
GoodThreshold = 0.12;
OkayThreshold = 0.2;
CutoffPoint = 0.15;

// SCORING
GreatPoints = 1.0;
GoodPoints = 0.5;
OkayPoints = 0.25;
Total = 0;
bShownFinalScoreYet = false;

// HITFX
EffectClass = Obj_CFX_PhysicalHit;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// FIST CURSOR MOVEMENT
NumCursors = 3;
CursorSeparation = 0.25;
CursorMoveSpeed = 0.01;
for(var i = 0; i &lt; NumCursors; i += 1)
{
    CursorArray[i, 2] = lerp(CursorArray[i, 2], 0, 0.15);
    if(CursorArray[i, 1])
        CursorArray[i, 3] = lerp(CursorArray[i, 3], 0, 0.15);
    else
    CursorArray[i, 0] += CursorMoveSpeed;
}

//TimerCheck
if(CurrentTime &gt; 0){
    // Selection
    if(Obj_InputManager.InputSelectAxisDown &gt; 0){    
        for(var i = 0; i &lt; NumCursors; i += 1)
        {
            if(CursorArray[i, 1] == false)
            {
                CursorArray[i, 1] = true;
                CursorArray[i, 2] = 1.0;
                
                // Scoring
                if(Scr_IsBetween(CursorArray[i, 0], 0.5 - GreatThreshold, 0.5 + GreatThreshold))
                {
                    TextType = MinigamePopupText.empt_Great;
                    Total += GreatPoints;
                }
                else if(Scr_IsBetween(CursorArray[i, 0], 0.5 - GoodThreshold, 0.5 + GoodThreshold))
                {
                    TextType = MinigamePopupText.empt_Good;
                    Total += GoodPoints;
                }
                else if(Scr_IsBetween(CursorArray[i, 0], 0.5 - OkayThreshold, 0.5 + OkayThreshold))
                {
                    TextType = MinigamePopupText.empt_Okay;
                    Total += OkayPoints
                }
                else
                {
                    TextType = MinigamePopupText.empt_Miss;
                }
                
                // Show Popup Text
                TextOriginX = lerp(124, 516, clamp(CursorArray[i, 0],0,1));
                TextOriginY = 180;
                TextDirX = irandom_range(-1, 1);
                TextDirY = irandom_range(-1, 1);
                TextTimer = TextTimerMax;
                
                // Spawn Hit FX
                instance_create(lerp(124, 516, clamp(CursorArray[i, 0],0,1)), 180, EffectClass);
                
                break;
            }
        }
    }
}else{
    if(!bShownFinalScoreYet){
        Total = Total/NumCursors;
        bShownFinalScoreYet = true;
        
        // Scoring
        if(Total &gt;= 1.0)
        {
            TextType = MinigamePopupText.empt_Perfect;
        }
        else if(Total &gt;= 0.75)
        {
            TextType = MinigamePopupText.empt_Great;
        }
        else if(Total &gt;= 0.5)
        {
            TextType = MinigamePopupText.empt_Good;
        }
        else if(Total &gt; 0)
        {
            TextType = MinigamePopupText.empt_Okay;
        }
        else
        {
            TextType = MinigamePopupText.empt_Miss;
        }
        
        // Show Popup Text
        TextOriginX = 320;
        TextOriginY = 180;
        TextDirX = 0;
        TextDirY = 0;
        TextTimer = TextTimerMax;
        
        Obj_AttackUsageData.Power = Total;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(bEnableDraw){ 
    event_inherited();

    // TIMING BAR
    draw_sprite_ext(GUI_Combat_Minigames_TimingBar, 0, 320, 180, 1.0, FadeAlpha, 0.0, c_white, 1.0);   
    
    // DRAW PARTICLES
    with(Obj_CombatFXMaster)
    {
        bShouldDraw = true;
        event_perform(ev_draw, 0);
        bShouldDraw = false;
    }
    
    // FIST CURSORS
    for(var i = 0; i &lt; NumCursors; i += 1)
    {
        draw_sprite_ext(GUI_Combat_Minigames_FistCursor, 0, lerp(124, 516, clamp(CursorArray[i, 0],0,1)), 180, 1.0 + CursorArray[i, 2], 1.0 + CursorArray[i, 2], lerp(-180, 180, clamp(CursorArray[i, 0],0,1)), c_white, (sin(lerp(0, pi, CursorArray[i, 0])) * 5) * CursorArray[i, 3] * FadeAlpha);
    }

    Scr_DrawMinigamePopupText();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
