<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Obj_EffectBloom</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

AnimationLength = 60;
CurrentFrame = 0;

// Bloom Overrides
BloomMinDistance = 1.1;
BloomMaxDistance = 1.3;

// Effects Properties
AnimStartBloomMinAlpha = 0.35;
AnimStartBloomMaxAlpha = 0.7;

SmallShockwaveMaxHeight = 32;
SmallShockwaveMaxRadius = 512;

LargeShockwaveMaxHeight = 32;
LargeShockwaveMaxRadius = 256;

LargestShockwaveMaxHeight = 64;

numSmallWaves = 4;
numLargeWaves = 3;

ExplosionTex = surface_create(64, 64);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>CurrentFrame += 1;

if(CurrentFrame &gt;= AnimationLength)
    instance_destroy();
    
// Effect Automation
BloomMinAlpha = lerp(0, AnimStartBloomMinAlpha, 1.5 - CurrentFrame/AnimationLength);
BloomMaxAlpha = lerp(0, AnimStartBloomMaxAlpha, 1.5 - CurrentFrame/AnimationLength);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(bAttackEffectEnableDraw){
    if(surface_exists(ExplosionTex))
    {
        surface_set_target(ExplosionTex);

        draw_clear_alpha(c_white, 0.0);
        d3d_set_projection_ortho(0,0,64,64,0);
        
        draw_set_alpha(1);
        draw_set_color(c_white);
        
        var imgOff = CurrentFrame*3;
        while(imgOff &gt; 64)
            imgOff -= 64
        draw_sprite_ext(Spr_Effects_Skills_ExplosionShockwave,0,imgOff,0,1,1,0,c_white, 5 - (CurrentFrame/AnimationLength)*5);
        draw_sprite_ext(Spr_Effects_Skills_ExplosionShockwave,0,imgOff-64,0,1,1,0,c_white, 5 - (CurrentFrame/AnimationLength)*5);
        
        surface_reset_target();
    }else{
        ExplosionTex = surface_create(64, 64);
    }

    Scr_Reset3dView();
    
    var Rad;
    var Hei;
    
    for(var i = 0; i &lt; numSmallWaves; i += 1){
        Rad = lerp(SmallShockwaveMaxRadius/8, SmallShockwaveMaxRadius, CurrentFrame/AnimationLength) - i * 16;
        Hei = lerp(0, SmallShockwaveMaxHeight, 1 - CurrentFrame/AnimationLength);
        d3d_draw_cylinder(x - Rad, y - Rad, Hei, x + Rad, y + Rad, 0, surface_get_texture(ExplosionTex), 5, 1, false, 12);
    }
    
    for(var i = 0; i &lt; numLargeWaves; i += 1){
        Rad = lerp(LargeShockwaveMaxRadius/4, LargeShockwaveMaxRadius, CurrentFrame/AnimationLength) - 32;
        Hei = lerp(0, LargeShockwaveMaxHeight, 1 - CurrentFrame/AnimationLength);
        d3d_draw_cylinder(x - Rad, y - Rad, Hei, x + Rad, y + Rad, 0, surface_get_texture(ExplosionTex), 5, 1, false, 12);
    }

    var scale = 16 + (sin(CurrentFrame/4) * 2);
    d3d_draw_cylinder(x - scale, y - scale, 1024, x + scale, y + scale, 0, surface_get_texture(ExplosionTex), 10, 1, false, 12);
    
    Rad = lerp( 16, 96, CurrentFrame/AnimationLength) - 32;
    d3d_draw_ellipsoid(x - Rad, y - Rad, -Rad, x + Rad, y + Rad, Rad, surface_get_texture(ExplosionTex), 10, 1,  12);
}
d3d_set_projection_ortho(0,0,Obj_RenderPipeline.ScreenWidth,Obj_RenderPipeline.ScreenHeight,0);
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
