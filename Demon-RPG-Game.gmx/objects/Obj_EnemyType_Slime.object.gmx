<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Obj_EnemyData</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Stats 
Hitpoints = 20; // Override
MaxHitpoints = 20; // Override
Strength = 4; // Override
Endurance = 5; // Override
Agility = 3; // Override
Luck = 3; // Override

// Dialouge Data //
NameStr = "SLIME";
StartDialougeString[0] = "(BUURRP), 'sup kid?"
StartDialougeString[1] = "Mmm? Wot do you want?"
StartDialougeString[2] = "Huh? You (BELCH) wan' sumffin'?"

TutorSkillIndex = 1;

SquishTimer = random(100);
EyesWobbleTimer = random(100);
CoreWobbleTimer = random(100);
CoreSquishTimer = random(100);

SkillArray[0] = 0;
SkillArray[1] = 0;
SkillArray[2] = 1;
LastSkillIndex = 2;

AnimationSpeed = 0.12;

IdleBreakMaxTimer = 180;
IdleBreakTimer = random(IdleBreakMaxTimer);
IdleBreakFrame = 0;
IdleBreakFrameRate = 0.25;

BlinkMaxTimer = 200;
BlinkTimer = random(BlinkMaxTimer);
BlinkFrame = 0;
BlinkFrameRate = 0.25;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

SquishTimer += AnimationSpeed*AnimPlaySpeed;
EyesWobbleTimer += AnimationSpeed*AnimPlaySpeed;
CoreWobbleTimer += AnimationSpeed*AnimPlaySpeed;
CoreSquishTimer += AnimationSpeed*AnimPlaySpeed;

IdleBreakTimer -= 1;
if(IdleBreakTimer &lt; 0)
{
    IdleBreakFrame += IdleBreakFrameRate*AnimPlaySpeed;
    if(IdleBreakFrame &gt;= 5)
    {
        IdleBreakFrame = 0;
        IdleBreakTimer = IdleBreakMaxTimer;  
    }
}

BlinkTimer -= 1;
if(BlinkTimer &lt; 0)
{
    BlinkFrame += BlinkFrameRate*AnimPlaySpeed;
    if(BlinkFrame &gt;= 4)
    {
        BlinkFrame = 0;
        BlinkTimer = BlinkMaxTimer;  
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(bEnableDraw)
{
    // Draw to Surface
    if(surface_exists(TextureSurface))
    {
        surface_set_target(TextureSurface);

        draw_clear_alpha(c_black, 0.0);
        d3d_set_projection_ortho(0,0,DrawResolution,DrawResolution,0);
        
        draw_set_alpha(1);
        draw_set_color(c_white);
        
        /*
            DRAW CODE FOR VISCOUS SUBSTANCE ENEMY
        */
        if((FlickerTimer) % 2  == 0){        
        
            // Jelly Core
            var CoreSquishX = abs(sin(CoreSquishTimer)/16 + 0.8);
            var CoreSquishY = abs(cos(CoreSquishTimer)/16 + 0.8);
            var CoreWobbleX = sin(CoreWobbleTimer/2) * 8;
            var CoreWobbleY = sin(CoreWobbleTimer/4) * 8;
            draw_sprite_ext(Spr_Enemy_ViscousSubstance_Core, 0, DrawResolution/2 + 4 + CoreWobbleX, DrawResolution - 38 + CoreWobbleY, CoreSquishX, CoreSquishY, 0.0, c_white, DeathAnimTimer/DeathAnimMaxTimer);
            
            // Body
            var BodySquishX = abs(sin(SquishTimer/10)/16 + 1.0);
            var BodySquishY = abs(cos(SquishTimer/10)/16 + 1.0);
            var BodyDamageX = (sin(lerp(-2 * pi, 2 * pi, FlickerTimer/FlickerMaxTimer)) * 0.25);
            var BodyDamageY = abs(sin(lerp(-2 * pi, 2 * pi, FlickerTimer/FlickerMaxTimer)) * 0.3);
            draw_sprite_ext(Spr_Enemy_ViscousSubstance_Body, IdleBreakFrame, DrawResolution/2, DrawResolution, BodySquishX + BodyDamageX, BodySquishY - BodyDamageY, 0.0, c_white, DeathAnimTimer/DeathAnimMaxTimer);
            
            // Eyes
            var EyesWobbleX = sin(EyesWobbleTimer/8) * 8;
            var EyesWobbleY = sin(EyesWobbleTimer/2) * 4;
            var eyef = BlinkFrame;
            if(FlickerTimer != 0)
                eyef = 4;
                
            draw_sprite_ext(Spr_Enemy_ViscousSubstance_Eyes, eyef, DrawResolution/2 + EyesWobbleX, DrawResolution + EyesWobbleY, 1.0, 1.0, 0.0, c_white, DeathAnimTimer/DeathAnimMaxTimer);
        }    
        
        surface_reset_target();
        Scr_Reset3dView();
    }else{
        TextureSurface = surface_create(DrawResolution,DrawResolution);
    }
    
    event_inherited();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
