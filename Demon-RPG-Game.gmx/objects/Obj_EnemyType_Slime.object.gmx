<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>Spr_Enemy_ViscousSubstance_TakeDamage</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Obj_EnemyData</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

// Stats 
Hitpoints = 20; // Override
MaxHitpoints = 20; // Override
Strength = 4; // Override
Endurance = 5; // Override
Agility = 3; // Override
Luck = 3; // Override

// Dialouge Data //
NameStr = "Goopy One";
StartDialougeString[0] = "#w010*belches loudly*,#/'sup kid?"
StartDialougeString[1] = "#w010Mmm?#/Wot do ya want#/from me?"
StartDialougeString[2] = "#w010Huh?#/You (BELCH) wan' sumffin'?"
StartDialougeString[3] = "#w010*dribbles on#/you*#/#/Eh? What're#/you lookin'#/at?!!"

QuestionIndex[0, 0] = "#w010Ya think SLIMES#/taste like#/limes??"; // Question name
QuestionIndex[0, 1] = "#w020You Try"; // Best Answer
QuestionIndex[0, 2] = "#w010That's a great#/ideas.#/Hmmm, wait,      #/my tounges is#/MADE of#/slime!!"; // Best Response
QuestionIndex[0, 3] = "#w020Totally"; // Neutral Answer
QuestionIndex[0, 4] = "#w010Aha, yous lookses#/like youses tried#/before, right?"; // Neutral Response
QuestionIndex[0, 5] = "#w020Eat you"; // Incorrect Answer
QuestionIndex[0, 6] = "#w010Uhhh...#/hows abouts we#/DON'T go eatin'#/our conver-#/sational partners??"; // Incorrect Response

QuestionIndex[1, 0] = "#w010Hmm, Do ya#/think there's more#/SLIMES out there#/likes meeses??"; // Question name
QuestionIndex[1, 1] = "#w020Yes"; // Best Answer
QuestionIndex[1, 2] = "#w010Ya thinks soes?#/I wantses to meets#/them!!"; // Best Response
QuestionIndex[1, 3] = "#w020No"; // Neutral Answer
QuestionIndex[1, 4] = "#w010Welp, no harmses in#/beings an#/individual."; // Neutral Response
QuestionIndex[1, 5] = "#w020Better ones"; // Incorrect Answer
QuestionIndex[1, 6] = "#w010Hah, can't bes!#/I'd bes the tuffest#/of the SLIMES!"; // Incorrect Response

DialougeFailedString = "#w030Eh, I'm#/bored.          #/Fightin' ya was#/more fun,          #/not gunna lie!!!"
DialougeSuccededString = "#w030You seem#/alright, kid.#/#/Here,#/use this ta #c255000000BASH#c031027027#/ tha smack outta#/some goons!!"

AlreadyHasSkillDialogue[0] = "#w010Aye!!#/You already know#/#c255000000BASH#c031027027???#/Beat it then!!"

TutorSkillIndex = 1;

SquishTimer = random(100);
EyesWobbleTimer = random(100);
CoreWobbleTimer = random(100);
CoreSquishTimer = random(100);

SkillArray[0] = 0;
SkillArray[1] = 0;
SkillArray[2] = 1;
LastSkillIndex = 2;

AnimationSpeed = 0.12;

IdleBreakMaxTimer = 180;
IdleBreakTimer = random(IdleBreakMaxTimer);
IdleBreakFrame = 0;
IdleBreakFrameRate = 0.25;

BlinkMaxTimer = 200;
BlinkTimer = random(BlinkMaxTimer);
BlinkFrame = 0;
BlinkFrameRate = 0.25;

AimOffset = 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

SquishTimer += AnimationSpeed*AnimPlaySpeed;
EyesWobbleTimer += AnimationSpeed*AnimPlaySpeed;
CoreWobbleTimer += AnimationSpeed*AnimPlaySpeed;
CoreSquishTimer += AnimationSpeed*AnimPlaySpeed;

IdleBreakTimer -= 1;
if(IdleBreakTimer &lt; 0)
{
    IdleBreakFrame += IdleBreakFrameRate*AnimPlaySpeed;
    if(IdleBreakFrame &gt;= 5)
    {
        IdleBreakFrame = 0;
        IdleBreakTimer = IdleBreakMaxTimer;  
    }
}

BlinkTimer -= 1;
if(BlinkTimer &lt; 0)
{
    BlinkFrame += BlinkFrameRate*AnimPlaySpeed;
    if(BlinkFrame &gt;= 4)
    {
        BlinkFrame = 0;
        BlinkTimer = BlinkMaxTimer;  
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(bEnableDraw)
{
    // Draw to Surface
    if(surface_exists(TextureSurface))
    {
        surface_set_target(TextureSurface);

        draw_clear_alpha(c_black, 0.0);
        d3d_set_projection_ortho(0,0,DrawResolution,DrawResolution,0);
        
        draw_set_alpha(1);
        draw_set_color(c_white);
        
        /*
            DRAW CODE FOR VISCOUS SUBSTANCE ENEMY
        */
        if((FlickerTimer) % 2  == 0){        
            if(FlickerTimer &gt; 0 || (Hitpoints &lt;= 0 &amp;&amp; Hitpoints &gt; -9999))
            {
                // DRAW HURT SPRITE
                draw_sprite_ext(Spr_Enemy_ViscousSubstance_TakeDamage, IdleBreakFrame, DrawResolution/2, DrawResolution, 1.0, 1.0, 0.0, c_white, DeathAnimTimer/DeathAnimMaxTimer);
            }
            else
            {
                // Jelly Core
                var CoreSquishX = abs(sin(CoreSquishTimer)/16 + 0.8);
                var CoreSquishY = abs(cos(CoreSquishTimer)/16 + 0.8);
                var CoreWobbleX = sin(CoreWobbleTimer/2) * 8;
                var CoreWobbleY = sin(CoreWobbleTimer/4) * 8;
                draw_sprite_ext(Spr_Enemy_ViscousSubstance_Core, 0, DrawResolution/2 + 4 + CoreWobbleX, DrawResolution - 38 + CoreWobbleY, CoreSquishX, CoreSquishY, 0.0, c_white, DeathAnimTimer/DeathAnimMaxTimer);
                
                // Body
                var BodySquishX = abs(sin(SquishTimer/10)/16 + 1.0);
                var BodySquishY = abs(cos(SquishTimer/10)/16 + 1.0);
                draw_sprite_ext(Spr_Enemy_ViscousSubstance_Body, IdleBreakFrame, DrawResolution/2, DrawResolution, BodySquishX, BodySquishY, 0.0, c_white, DeathAnimTimer/DeathAnimMaxTimer);
                
                // Eyes
                var EyesWobbleX = sin(EyesWobbleTimer/8) * 8;
                var EyesWobbleY = sin(EyesWobbleTimer/2) * 4;
                var eyef = BlinkFrame;
                    
                draw_sprite_ext(Spr_Enemy_ViscousSubstance_Eyes, eyef, DrawResolution/2 + EyesWobbleX, DrawResolution + EyesWobbleY, 1.0, 1.0, 0.0, c_white, DeathAnimTimer/DeathAnimMaxTimer);
            
            }
        }    
        
        surface_reset_target();
        Scr_Reset3dView();
    }else{
        TextureSurface = surface_create(DrawResolution,DrawResolution);
    }
    
    event_inherited();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
