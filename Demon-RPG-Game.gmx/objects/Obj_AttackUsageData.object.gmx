<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum Affinity{
    a_Physical,
    a_Fire,
    a_Ice,
    a_Lightning,
    a_Arcane
};

enum StatToBuff{
    stb_Attack,
    stb_Defense,
    stb_Speed,
    stb_All
};

Power = 0; // How accurate the player was in the attack's minigame
User = -2; // Neg 2 never hits anything, since the lowest index is -1, the player
Target = -2; // Neg 2 never hits anything, since the lowest index is -1, the player
Index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/** ITEM ENTRIES */
switch(Index)
{
    /* ??? */
    case 0:
    {
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/** SKILL ENTRIES */
var Popup = instance_create(0,0, Obj_SkillPopup);
Popup.SkillIndex = Index;

switch(Index)
{
    /* Wait Index */
    case 0:
    {
        break;
    }
    
    /* Tier 1 Phys */
    case 1:
    {
        if(Scr_AccuracyCheck(Target, User))
        {
            Scr_PerformCameraShake(8,0.7);
            Scr_DealDamage(10 * Power, Affinity.a_Physical, Target, User, true);
        }
        //Scr_SpawnAttackEffects(Target, Obj_AttackEffect_PhysLight);
        break;
    }
    /* Tier 4 Phys */
    case 4:
    {
        if(Scr_AccuracyCheck(Target, User))
        {
            Scr_PerformCameraShake(15,0.4);
            Scr_DealDamage(80, Affinity.a_Physical, Target, User, true);
        }
        Scr_SpawnAttackEffects(Target, Obj_AttackEffect_PhysColossal);
        break;
    }
    /* GargoBlaster */
    case 5:
    {
        var TurnsToCharge = 1;
        var UserRef = noone;
        if(User == -1)
        {
            UserRef = Obj_PlayerData;
        }else{
            UserRef = instance_find(Obj_EnemyData, User);
        }
        
        // Setup Charge
        if(UserRef.LastAttackIndex != 5)
        {
            UserRef.LastAttackIndex = 5;
            UserRef.ChargeTurnsRemaining = TurnsToCharge + 1;
            UserRef.StoredTarget = Target;
        }
        
        // Decrement Turn Charge Count
        UserRef.ChargeTurnsRemaining -= 1;
        show_debug_message(UserRef.ChargeTurnsRemaining);
        if(UserRef.ChargeTurnsRemaining &gt; 0)
        {
            // Spawn Charge Effect
            if(User == -1)
                Popup.OverrideString = "You are charging...";
            else
                Popup.OverrideString = UserRef.NameStr + " is charging...";
        }
        else
        {
            // Do Attack here
            //if(Scr_AccuracyCheck(Target, User))
            //{
                Scr_PerformCameraShake(15,0.4);
                Scr_DealDamage(25, Affinity.a_Arcane, Target, User, true);
            //}
            Scr_SpawnAttackEffects(Target, Obj_AttackEffect_PhysColossal);
            UserRef.LastAttackIndex = -1;
        }  
        break;
    }
    /* Tier 1 SPD Buff */
    case 30:
    {
        Scr_ApplyBuff(1, StatToBuff.stb_Speed, Target);
        Scr_SpawnAttackEffects(Target, Obj_AttackEffect_SpeedUp);
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/** GUN ENTRIES */
switch(Index)
{
    /* 9mm Rounds */
    case 0:
    {
        if(Power != 0)
        {
            Scr_PerformCameraShake(5,0.6);
            Scr_DealDamage(5 * Power, Affinity.a_Physical, Target, User, false);
        }
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
